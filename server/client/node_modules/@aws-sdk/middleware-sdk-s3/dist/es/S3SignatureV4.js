import { __assign, __awaiter, __generator } from "tslib";
import { SignatureV4 } from "@aws-sdk/signature-v4";
/**
 * A SigV4-compatible signer for S3 service. In order to support SigV4a algorithm according to the operation input
 * dynamically, the signer wraps native module SigV4a signer and JS SigV4 signer. It signs the request with SigV4a
 * algorithm if the request needs to be signed with `*` region. Otherwise, it signs the request with normal SigV4
 * signer.
 * Note that SigV4a signer is only supported in Node.js now because it depends on a native dependency.
 * @private
 */
var S3SignatureV4 = /** @class */ (function () {
    function S3SignatureV4(options) {
        this.sigv4Signer = new SignatureV4(options);
        this.signerOptions = options;
    }
    S3SignatureV4.prototype.sign = function (requestToSign, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (options.signingRegion === "*") {
                    if (this.signerOptions.runtime !== "node")
                        throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
                    return [2 /*return*/, this.getSigv4aSigner().sign(requestToSign, options)];
                }
                return [2 /*return*/, this.sigv4Signer.sign(requestToSign, options)];
            });
        });
    };
    S3SignatureV4.prototype.presign = function (originalRequest, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (options.signingRegion === "*") {
                    if (this.signerOptions.runtime !== "node")
                        throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
                    return [2 /*return*/, this.getSigv4aSigner().presign(originalRequest, options)];
                }
                return [2 /*return*/, this.sigv4Signer.presign(originalRequest, options)];
            });
        });
    };
    S3SignatureV4.prototype.getSigv4aSigner = function () {
        if (!this.sigv4aSigner) {
            var CrtSignerV4_1;
            try {
                CrtSignerV4_1 = require("@aws-sdk/signature-v4-crt").CrtSignerV4;
                if (typeof CrtSignerV4_1 !== "function")
                    throw new Error();
            }
            catch (e) {
                e.message =
                    e.message + "\nPlease check if you have installed \"@aws-sdk/signature-v4-crt\" package explicitly. \n" +
                        "For more information please go to https://github.com/aws/aws-sdk-js-v3#known-issues";
                throw e;
            }
            this.sigv4aSigner = new CrtSignerV4_1(__assign(__assign({}, this.signerOptions), { signingAlgorithm: 1 }));
        }
        return this.sigv4aSigner;
    };
    return S3SignatureV4;
}());
export { S3SignatureV4 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUzNTaWduYXR1cmVWNC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TM1NpZ25hdHVyZVY0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUEwQyxNQUFNLHVCQUF1QixDQUFDO0FBZTVGOzs7Ozs7O0dBT0c7QUFDSDtJQUtFLHVCQUFZLE9BQXVCO1FBQ2pDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUM7SUFDL0IsQ0FBQztJQUVZLDRCQUFJLEdBQWpCLFVBQWtCLGFBQTBCLEVBQUUsT0FBcUM7UUFBckMsd0JBQUEsRUFBQSxZQUFxQzs7O2dCQUNqRixJQUFJLE9BQU8sQ0FBQyxhQUFhLEtBQUssR0FBRyxFQUFFO29CQUNqQyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxLQUFLLE1BQU07d0JBQ3ZDLE1BQU0sSUFBSSxLQUFLLENBQUMsOEZBQThGLENBQUMsQ0FBQztvQkFDbEgsc0JBQU8sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLEVBQUM7aUJBQzVEO2dCQUNELHNCQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsRUFBQzs7O0tBQ3REO0lBRVksK0JBQU8sR0FBcEIsVUFBcUIsZUFBNEIsRUFBRSxPQUF3QztRQUF4Qyx3QkFBQSxFQUFBLFlBQXdDOzs7Z0JBQ3pGLElBQUksT0FBTyxDQUFDLGFBQWEsS0FBSyxHQUFHLEVBQUU7b0JBQ2pDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEtBQUssTUFBTTt3QkFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyw4RkFBOEYsQ0FBQyxDQUFDO29CQUNsSCxzQkFBTyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsRUFBQztpQkFDakU7Z0JBQ0Qsc0JBQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxFQUFDOzs7S0FDM0Q7SUFFTyx1Q0FBZSxHQUF2QjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3RCLElBQUksYUFBa0YsQ0FBQztZQUN2RixJQUFJO2dCQUNGLGFBQVcsR0FBRyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxXQUFXLENBQUM7Z0JBQy9ELElBQUksT0FBTyxhQUFXLEtBQUssVUFBVTtvQkFBRSxNQUFNLElBQUksS0FBSyxFQUFFLENBQUM7YUFDMUQ7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixDQUFDLENBQUMsT0FBTztvQkFDSixDQUFDLENBQUMsT0FBTyw4RkFBeUY7d0JBQ3JHLHFGQUFxRixDQUFDO2dCQUN4RixNQUFNLENBQUMsQ0FBQzthQUNUO1lBQ0QsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLGFBQVcsdUJBQzlCLElBQUksQ0FBQyxhQUFhLEtBQ3JCLGdCQUFnQixFQUFFLENBQUMsSUFDbkIsQ0FBQztTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7SUFDSCxvQkFBQztBQUFELENBQUMsQUEvQ0QsSUErQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaWduYXR1cmVWNCwgU2lnbmF0dXJlVjRDcnlwdG9Jbml0LCBTaWduYXR1cmVWNEluaXQgfSBmcm9tIFwiQGF3cy1zZGsvc2lnbmF0dXJlLXY0XCI7XG5pbXBvcnQgdHlwZSB7IENydFNpZ25lclY0LCBDcnRTaWduZXJWNEluaXQgfSBmcm9tIFwiQGF3cy1zZGsvc2lnbmF0dXJlLXY0LWNydFwiO1xuaW1wb3J0IHtcbiAgSHR0cFJlcXVlc3QsXG4gIFJlcXVlc3RQcmVzaWduZXIsXG4gIFJlcXVlc3RQcmVzaWduaW5nQXJndW1lbnRzLFxuICBSZXF1ZXN0U2lnbmVyLFxuICBSZXF1ZXN0U2lnbmluZ0FyZ3VtZW50cyxcbn0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5cbmV4cG9ydCB0eXBlIFMzU2lnbmVyVjRJbml0ID0gU2lnbmF0dXJlVjRJbml0ICZcbiAgU2lnbmF0dXJlVjRDcnlwdG9Jbml0ICYge1xuICAgIHJ1bnRpbWU/OiBzdHJpbmc7XG4gIH07XG5cbi8qKlxuICogQSBTaWdWNC1jb21wYXRpYmxlIHNpZ25lciBmb3IgUzMgc2VydmljZS4gSW4gb3JkZXIgdG8gc3VwcG9ydCBTaWdWNGEgYWxnb3JpdGhtIGFjY29yZGluZyB0byB0aGUgb3BlcmF0aW9uIGlucHV0XG4gKiBkeW5hbWljYWxseSwgdGhlIHNpZ25lciB3cmFwcyBuYXRpdmUgbW9kdWxlIFNpZ1Y0YSBzaWduZXIgYW5kIEpTIFNpZ1Y0IHNpZ25lci4gSXQgc2lnbnMgdGhlIHJlcXVlc3Qgd2l0aCBTaWdWNGFcbiAqIGFsZ29yaXRobSBpZiB0aGUgcmVxdWVzdCBuZWVkcyB0byBiZSBzaWduZWQgd2l0aCBgKmAgcmVnaW9uLiBPdGhlcndpc2UsIGl0IHNpZ25zIHRoZSByZXF1ZXN0IHdpdGggbm9ybWFsIFNpZ1Y0XG4gKiBzaWduZXIuXG4gKiBOb3RlIHRoYXQgU2lnVjRhIHNpZ25lciBpcyBvbmx5IHN1cHBvcnRlZCBpbiBOb2RlLmpzIG5vdyBiZWNhdXNlIGl0IGRlcGVuZHMgb24gYSBuYXRpdmUgZGVwZW5kZW5jeS5cbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBTM1NpZ25hdHVyZVY0IGltcGxlbWVudHMgUmVxdWVzdFByZXNpZ25lciwgUmVxdWVzdFNpZ25lciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2lndjRTaWduZXI6IFNpZ25hdHVyZVY0O1xuICBwcml2YXRlIHNpZ3Y0YVNpZ25lcj86IENydFNpZ25lclY0O1xuICBwcml2YXRlIHJlYWRvbmx5IHNpZ25lck9wdGlvbnM6IFMzU2lnbmVyVjRJbml0O1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFMzU2lnbmVyVjRJbml0KSB7XG4gICAgdGhpcy5zaWd2NFNpZ25lciA9IG5ldyBTaWduYXR1cmVWNChvcHRpb25zKTtcbiAgICB0aGlzLnNpZ25lck9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNpZ24ocmVxdWVzdFRvU2lnbjogSHR0cFJlcXVlc3QsIG9wdGlvbnM6IFJlcXVlc3RTaWduaW5nQXJndW1lbnRzID0ge30pOiBQcm9taXNlPEh0dHBSZXF1ZXN0PiB7XG4gICAgaWYgKG9wdGlvbnMuc2lnbmluZ1JlZ2lvbiA9PT0gXCIqXCIpIHtcbiAgICAgIGlmICh0aGlzLnNpZ25lck9wdGlvbnMucnVudGltZSAhPT0gXCJub2RlXCIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgcmVxdWVzdCByZXF1aXJlcyBzaWduaW5nIHdpdGggU2lnVjRBc3ltbWV0cmljIGFsZ29yaXRobS4gSXQncyBvbmx5IGF2YWlsYWJsZSBpbiBOb2RlLmpzXCIpO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2lndjRhU2lnbmVyKCkuc2lnbihyZXF1ZXN0VG9TaWduLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2lndjRTaWduZXIuc2lnbihyZXF1ZXN0VG9TaWduLCBvcHRpb25zKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBwcmVzaWduKG9yaWdpbmFsUmVxdWVzdDogSHR0cFJlcXVlc3QsIG9wdGlvbnM6IFJlcXVlc3RQcmVzaWduaW5nQXJndW1lbnRzID0ge30pOiBQcm9taXNlPEh0dHBSZXF1ZXN0PiB7XG4gICAgaWYgKG9wdGlvbnMuc2lnbmluZ1JlZ2lvbiA9PT0gXCIqXCIpIHtcbiAgICAgIGlmICh0aGlzLnNpZ25lck9wdGlvbnMucnVudGltZSAhPT0gXCJub2RlXCIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgcmVxdWVzdCByZXF1aXJlcyBzaWduaW5nIHdpdGggU2lnVjRBc3ltbWV0cmljIGFsZ29yaXRobS4gSXQncyBvbmx5IGF2YWlsYWJsZSBpbiBOb2RlLmpzXCIpO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2lndjRhU2lnbmVyKCkucHJlc2lnbihvcmlnaW5hbFJlcXVlc3QsIG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zaWd2NFNpZ25lci5wcmVzaWduKG9yaWdpbmFsUmVxdWVzdCwgb3B0aW9ucyk7XG4gIH1cblxuICBwcml2YXRlIGdldFNpZ3Y0YVNpZ25lcigpOiBDcnRTaWduZXJWNCB7XG4gICAgaWYgKCF0aGlzLnNpZ3Y0YVNpZ25lcikge1xuICAgICAgbGV0IENydFNpZ25lclY0OiBuZXcgKG9wdGlvbnM6IENydFNpZ25lclY0SW5pdCAmIFNpZ25hdHVyZVY0Q3J5cHRvSW5pdCkgPT4gQ3J0U2lnbmVyVjQ7XG4gICAgICB0cnkge1xuICAgICAgICBDcnRTaWduZXJWNCA9IHJlcXVpcmUoXCJAYXdzLXNkay9zaWduYXR1cmUtdjQtY3J0XCIpLkNydFNpZ25lclY0O1xuICAgICAgICBpZiAodHlwZW9mIENydFNpZ25lclY0ICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBlLm1lc3NhZ2UgPVxuICAgICAgICAgIGAke2UubWVzc2FnZX1cXG5QbGVhc2UgY2hlY2sgaWYgeW91IGhhdmUgaW5zdGFsbGVkIFwiQGF3cy1zZGsvc2lnbmF0dXJlLXY0LWNydFwiIHBhY2thZ2UgZXhwbGljaXRseS4gXFxuYCArXG4gICAgICAgICAgXCJGb3IgbW9yZSBpbmZvcm1hdGlvbiBwbGVhc2UgZ28gdG8gaHR0cHM6Ly9naXRodWIuY29tL2F3cy9hd3Mtc2RrLWpzLXYzI2tub3duLWlzc3Vlc1wiO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgICAgdGhpcy5zaWd2NGFTaWduZXIgPSBuZXcgQ3J0U2lnbmVyVjQoe1xuICAgICAgICAuLi50aGlzLnNpZ25lck9wdGlvbnMsXG4gICAgICAgIHNpZ25pbmdBbGdvcml0aG06IDEsXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2lndjRhU2lnbmVyO1xuICB9XG59XG4iXX0=