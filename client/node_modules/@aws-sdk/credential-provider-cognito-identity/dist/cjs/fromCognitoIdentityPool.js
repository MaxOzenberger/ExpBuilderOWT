"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromCognitoIdentityPool = void 0;
const client_cognito_identity_1 = require("@aws-sdk/client-cognito-identity");
const property_provider_1 = require("@aws-sdk/property-provider");
const fromCognitoIdentity_1 = require("./fromCognitoIdentity");
const localStorage_1 = require("./localStorage");
const resolveLogins_1 = require("./resolveLogins");
function fromCognitoIdentityPool({ accountId, cache = localStorage_1.localStorage(), client, customRoleArn, identityPoolId, logins, userIdentifier = !logins || Object.keys(logins).length === 0 ? "ANONYMOUS" : undefined, }) {
    const cacheKey = userIdentifier ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}` : undefined;
    let provider = async () => {
        let identityId = cacheKey && (await cache.getItem(cacheKey));
        if (!identityId) {
            const { IdentityId = throwOnMissingId() } = await client.send(new client_cognito_identity_1.GetIdCommand({
                AccountId: accountId,
                IdentityPoolId: identityPoolId,
                Logins: logins ? await resolveLogins_1.resolveLogins(logins) : undefined,
            }));
            identityId = IdentityId;
            if (cacheKey) {
                Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => { });
            }
        }
        provider = fromCognitoIdentity_1.fromCognitoIdentity({
            client,
            customRoleArn,
            logins,
            identityId,
        });
        return provider();
    };
    return () => provider().catch(async (err) => {
        if (cacheKey) {
            Promise.resolve(cache.removeItem(cacheKey)).catch(() => { });
        }
        throw err;
    });
}
exports.fromCognitoIdentityPool = fromCognitoIdentityPool;
function throwOnMissingId() {
    throw new property_provider_1.CredentialsProviderError("Response from Amazon Cognito contained no identity ID");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbUNvZ25pdG9JZGVudGl0eVBvb2wuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZnJvbUNvZ25pdG9JZGVudGl0eVBvb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOEVBQWdFO0FBQ2hFLGtFQUFzRTtBQUd0RSwrREFBK0Y7QUFDL0YsaURBQThDO0FBQzlDLG1EQUFnRDtBQVdoRCxTQUFnQix1QkFBdUIsQ0FBQyxFQUN0QyxTQUFTLEVBQ1QsS0FBSyxHQUFHLDJCQUFZLEVBQUUsRUFDdEIsTUFBTSxFQUNOLGFBQWEsRUFDYixjQUFjLEVBQ2QsTUFBTSxFQUNOLGNBQWMsR0FBRyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUNwRDtJQUNsQyxNQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLG9DQUFvQyxjQUFjLElBQUksY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUVySCxJQUFJLFFBQVEsR0FBc0MsS0FBSyxJQUFJLEVBQUU7UUFDM0QsSUFBSSxVQUFVLEdBQUcsUUFBUSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLE1BQU0sRUFBRSxVQUFVLEdBQUcsZ0JBQWdCLEVBQUUsRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FDM0QsSUFBSSxzQ0FBWSxDQUFDO2dCQUNmLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixjQUFjLEVBQUUsY0FBYztnQkFDOUIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSw2QkFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO2FBQ3pELENBQUMsQ0FDSCxDQUFDO1lBQ0YsVUFBVSxHQUFHLFVBQVUsQ0FBQztZQUN4QixJQUFJLFFBQVEsRUFBRTtnQkFDWixPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3RFO1NBQ0Y7UUFFRCxRQUFRLEdBQUcseUNBQW1CLENBQUM7WUFDN0IsTUFBTTtZQUNOLGFBQWE7WUFDYixNQUFNO1lBQ04sVUFBVTtTQUNYLENBQUMsQ0FBQztRQUVILE9BQU8sUUFBUSxFQUFFLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0lBRUYsT0FBTyxHQUFHLEVBQUUsQ0FDVixRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQzdCLElBQUksUUFBUSxFQUFFO1lBQ1osT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzdEO1FBRUQsTUFBTSxHQUFHLENBQUM7SUFDWixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUE3Q0QsMERBNkNDO0FBc0NELFNBQVMsZ0JBQWdCO0lBQ3ZCLE1BQU0sSUFBSSw0Q0FBd0IsQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO0FBQzlGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHZXRJZENvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWNvZ25pdG8taWRlbnRpdHlcIjtcbmltcG9ydCB7IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvciB9IGZyb20gXCJAYXdzLXNkay9wcm9wZXJ0eS1wcm92aWRlclwiO1xuXG5pbXBvcnQgeyBDb2duaXRvUHJvdmlkZXJQYXJhbWV0ZXJzIH0gZnJvbSBcIi4vQ29nbml0b1Byb3ZpZGVyUGFyYW1ldGVyc1wiO1xuaW1wb3J0IHsgQ29nbml0b0lkZW50aXR5Q3JlZGVudGlhbFByb3ZpZGVyLCBmcm9tQ29nbml0b0lkZW50aXR5IH0gZnJvbSBcIi4vZnJvbUNvZ25pdG9JZGVudGl0eVwiO1xuaW1wb3J0IHsgbG9jYWxTdG9yYWdlIH0gZnJvbSBcIi4vbG9jYWxTdG9yYWdlXCI7XG5pbXBvcnQgeyByZXNvbHZlTG9naW5zIH0gZnJvbSBcIi4vcmVzb2x2ZUxvZ2luc1wiO1xuaW1wb3J0IHsgU3RvcmFnZSB9IGZyb20gXCIuL1N0b3JhZ2VcIjtcblxuLyoqXG4gKiBSZXRyaWV2ZXMgb3IgZ2VuZXJhdGVzIGEgdW5pcXVlIGlkZW50aWZpZXIgdXNpbmcgQW1hem9uIENvZ25pdG8ncyBgR2V0SWRgXG4gKiBvcGVyYXRpb24sIHRoZW4gZ2VuZXJhdGVzIHRlbXBvcmFyeSBBV1MgY3JlZGVudGlhbHMgdXNpbmcgQW1hem9uIENvZ25pdG8nc1xuICogYEdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHlgIG9wZXJhdGlvbi5cbiAqXG4gKiBSZXN1bHRzIGZyb20gYEdldElkYCBhcmUgY2FjaGVkIGludGVybmFsbHksIGJ1dCByZXN1bHRzIGZyb21cbiAqIGBHZXRDcmVkZW50aWFsc0ZvcklkZW50aXR5YCBhcmUgbm90LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUNvZ25pdG9JZGVudGl0eVBvb2woe1xuICBhY2NvdW50SWQsXG4gIGNhY2hlID0gbG9jYWxTdG9yYWdlKCksXG4gIGNsaWVudCxcbiAgY3VzdG9tUm9sZUFybixcbiAgaWRlbnRpdHlQb29sSWQsXG4gIGxvZ2lucyxcbiAgdXNlcklkZW50aWZpZXIgPSAhbG9naW5zIHx8IE9iamVjdC5rZXlzKGxvZ2lucykubGVuZ3RoID09PSAwID8gXCJBTk9OWU1PVVNcIiA6IHVuZGVmaW5lZCxcbn06IEZyb21Db2duaXRvSWRlbnRpdHlQb29sUGFyYW1ldGVycyk6IENvZ25pdG9JZGVudGl0eUNyZWRlbnRpYWxQcm92aWRlciB7XG4gIGNvbnN0IGNhY2hlS2V5ID0gdXNlcklkZW50aWZpZXIgPyBgYXdzOmNvZ25pdG8taWRlbnRpdHktY3JlZGVudGlhbHM6JHtpZGVudGl0eVBvb2xJZH06JHt1c2VySWRlbnRpZmllcn1gIDogdW5kZWZpbmVkO1xuXG4gIGxldCBwcm92aWRlcjogQ29nbml0b0lkZW50aXR5Q3JlZGVudGlhbFByb3ZpZGVyID0gYXN5bmMgKCkgPT4ge1xuICAgIGxldCBpZGVudGl0eUlkID0gY2FjaGVLZXkgJiYgKGF3YWl0IGNhY2hlLmdldEl0ZW0oY2FjaGVLZXkpKTtcbiAgICBpZiAoIWlkZW50aXR5SWQpIHtcbiAgICAgIGNvbnN0IHsgSWRlbnRpdHlJZCA9IHRocm93T25NaXNzaW5nSWQoKSB9ID0gYXdhaXQgY2xpZW50LnNlbmQoXG4gICAgICAgIG5ldyBHZXRJZENvbW1hbmQoe1xuICAgICAgICAgIEFjY291bnRJZDogYWNjb3VudElkLFxuICAgICAgICAgIElkZW50aXR5UG9vbElkOiBpZGVudGl0eVBvb2xJZCxcbiAgICAgICAgICBMb2dpbnM6IGxvZ2lucyA/IGF3YWl0IHJlc29sdmVMb2dpbnMobG9naW5zKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICBpZGVudGl0eUlkID0gSWRlbnRpdHlJZDtcbiAgICAgIGlmIChjYWNoZUtleSkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoY2FjaGUuc2V0SXRlbShjYWNoZUtleSwgaWRlbnRpdHlJZCkpLmNhdGNoKCgpID0+IHt9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcm92aWRlciA9IGZyb21Db2duaXRvSWRlbnRpdHkoe1xuICAgICAgY2xpZW50LFxuICAgICAgY3VzdG9tUm9sZUFybixcbiAgICAgIGxvZ2lucyxcbiAgICAgIGlkZW50aXR5SWQsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcHJvdmlkZXIoKTtcbiAgfTtcblxuICByZXR1cm4gKCkgPT5cbiAgICBwcm92aWRlcigpLmNhdGNoKGFzeW5jIChlcnIpID0+IHtcbiAgICAgIGlmIChjYWNoZUtleSkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoY2FjaGUucmVtb3ZlSXRlbShjYWNoZUtleSkpLmNhdGNoKCgpID0+IHt9KTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyO1xuICAgIH0pO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZyb21Db2duaXRvSWRlbnRpdHlQb29sUGFyYW1ldGVycyBleHRlbmRzIENvZ25pdG9Qcm92aWRlclBhcmFtZXRlcnMge1xuICAvKipcbiAgICogQSBzdGFuZGFyZCBBV1MgYWNjb3VudCBJRCAoOSsgZGlnaXRzKS5cbiAgICovXG4gIGFjY291bnRJZD86IHN0cmluZztcblxuICAvKipcbiAgICogQSBjYWNoZSBpbiB3aGljaCB0byBzdG9yZSByZXNvbHZlZCBDb2duaXRvIElkZW50aXR5SWRzLiBJZiBub3Qgc3VwcGxpZWQsXG4gICAqIHRoZSBjcmVkZW50aWFsIHByb3ZpZGVyIHdpbGwgYXR0ZW1wdCB0byBzdG9yZSBJZGVudGl0eUlkcyBpbiBvbmUgb2YgdGhlXG4gICAqIGZvbGxvd2luZyAoaW4gb3JkZXIgb2YgcHJlZmVyZW5jZSk6XG4gICAqICAgMS4gSW5kZXhlZERCXG4gICAqICAgMi4gTG9jYWxTdG9yYWdlXG4gICAqICAgMy4gQW4gaW4tbWVtb3J5IGNhY2hlIG9iamVjdCB0aGF0IHdpbGwgbm90IHBlcnNpc3QgYmV0d2VlbiBwYWdlcy5cbiAgICpcbiAgICogSW5kZXhlZERCIGlzIHByZWZlcnJlZCB0byBtYXhpbWl6ZSBkYXRhIHNoYXJpbmcgYmV0d2VlbiB0b3AtbGV2ZWxcbiAgICogYnJvd3NpbmcgY29udGV4dHMgYW5kIHdlYiB3b3JrZXJzLlxuICAgKlxuICAgKiBUaGUgcHJvdmlkZXIgd2lsbCBub3QgY2FjaGUgSWRlbnRpdHlJZHMgb2YgYXV0aGVudGljYXRlZCB1c2VycyB1bmxlc3MgYVxuICAgKiBzZXBhcmF0ZSBgdXNlcklkZW50aXRpZmVyYCBwYXJhbWV0ZXIgaXMgc3VwcGxpZWQuXG4gICAqL1xuICBjYWNoZT86IFN0b3JhZ2U7XG5cbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGlkZW50aXR5IHBvb2wgZnJvbSB3aGljaCBhbiBpZGVudGl0eSBzaG91bGRcbiAgICogYmUgcmV0cmlldmVkIG9yIGdlbmVyYXRlZC5cbiAgICovXG4gIGlkZW50aXR5UG9vbElkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSB1c2VyLiBUaGlzIGlzIGRpc3RpbmN0IGZyb20gYSBDb2duaXRvXG4gICAqIElkZW50aXR5SWQgYW5kIHNob3VsZCBpbnN0ZWFkIGJlIGFuIGlkZW50aWZpZXIgbWVhbmluZ2Z1bCB0byB5b3VyXG4gICAqIGFwcGxpY2F0aW9uLiBVc2VkIHRvIGNhY2hlIENvZ25pdG8gSWRlbnRpdHlJZHMgb24gYSBwZXItdXNlciBiYXNpcy5cbiAgICovXG4gIHVzZXJJZGVudGlmaWVyPzogc3RyaW5nO1xufVxuXG5mdW5jdGlvbiB0aHJvd09uTWlzc2luZ0lkKCk6IG5ldmVyIHtcbiAgdGhyb3cgbmV3IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihcIlJlc3BvbnNlIGZyb20gQW1hem9uIENvZ25pdG8gY29udGFpbmVkIG5vIGlkZW50aXR5IElEXCIpO1xufVxuIl19