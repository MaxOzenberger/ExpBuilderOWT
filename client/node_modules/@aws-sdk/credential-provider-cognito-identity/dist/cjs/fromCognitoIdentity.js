"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromCognitoIdentity = void 0;
const client_cognito_identity_1 = require("@aws-sdk/client-cognito-identity");
const property_provider_1 = require("@aws-sdk/property-provider");
const resolveLogins_1 = require("./resolveLogins");
function fromCognitoIdentity(parameters) {
    return async () => {
        const { Credentials: { AccessKeyId = throwOnMissingAccessKeyId(), Expiration, SecretKey = throwOnMissingSecretKey(), SessionToken, } = throwOnMissingCredentials(), } = await parameters.client.send(new client_cognito_identity_1.GetCredentialsForIdentityCommand({
            CustomRoleArn: parameters.customRoleArn,
            IdentityId: parameters.identityId,
            Logins: parameters.logins ? await resolveLogins_1.resolveLogins(parameters.logins) : undefined,
        }));
        return {
            identityId: parameters.identityId,
            accessKeyId: AccessKeyId,
            secretAccessKey: SecretKey,
            sessionToken: SessionToken,
            expiration: Expiration,
        };
    };
}
exports.fromCognitoIdentity = fromCognitoIdentity;
function throwOnMissingAccessKeyId() {
    throw new property_provider_1.CredentialsProviderError("Response from Amazon Cognito contained no access key ID");
}
function throwOnMissingCredentials() {
    throw new property_provider_1.CredentialsProviderError("Response from Amazon Cognito contained no credentials");
}
function throwOnMissingSecretKey() {
    throw new property_provider_1.CredentialsProviderError("Response from Amazon Cognito contained no secret key");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbUNvZ25pdG9JZGVudGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mcm9tQ29nbml0b0lkZW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhFQUFvRjtBQUNwRixrRUFBc0U7QUFJdEUsbURBQWdEO0FBaUJoRCxTQUFnQixtQkFBbUIsQ0FBQyxVQUF5QztJQUMzRSxPQUFPLEtBQUssSUFBeUMsRUFBRTtRQUNyRCxNQUFNLEVBQ0osV0FBVyxFQUFFLEVBQ1gsV0FBVyxHQUFHLHlCQUF5QixFQUFFLEVBQ3pDLFVBQVUsRUFDVixTQUFTLEdBQUcsdUJBQXVCLEVBQUUsRUFDckMsWUFBWSxHQUNiLEdBQUcseUJBQXlCLEVBQUUsR0FDaEMsR0FBRyxNQUFNLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUM5QixJQUFJLDBEQUFnQyxDQUFDO1lBQ25DLGFBQWEsRUFBRSxVQUFVLENBQUMsYUFBYTtZQUN2QyxVQUFVLEVBQUUsVUFBVSxDQUFDLFVBQVU7WUFDakMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sNkJBQWEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7U0FDL0UsQ0FBQyxDQUNILENBQUM7UUFFRixPQUFPO1lBQ0wsVUFBVSxFQUFFLFVBQVUsQ0FBQyxVQUFVO1lBQ2pDLFdBQVcsRUFBRSxXQUFXO1lBQ3hCLGVBQWUsRUFBRSxTQUFTO1lBQzFCLFlBQVksRUFBRSxZQUFZO1lBQzFCLFVBQVUsRUFBRSxVQUFVO1NBQ3ZCLENBQUM7SUFDSixDQUFDLENBQUM7QUFDSixDQUFDO0FBekJELGtEQXlCQztBQVVELFNBQVMseUJBQXlCO0lBQ2hDLE1BQU0sSUFBSSw0Q0FBd0IsQ0FBQyx5REFBeUQsQ0FBQyxDQUFDO0FBQ2hHLENBQUM7QUFFRCxTQUFTLHlCQUF5QjtJQUNoQyxNQUFNLElBQUksNENBQXdCLENBQUMsdURBQXVELENBQUMsQ0FBQztBQUM5RixDQUFDO0FBRUQsU0FBUyx1QkFBdUI7SUFDOUIsTUFBTSxJQUFJLDRDQUF3QixDQUFDLHNEQUFzRCxDQUFDLENBQUM7QUFDN0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHlDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1jb2duaXRvLWlkZW50aXR5XCI7XG5pbXBvcnQgeyBDcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IgfSBmcm9tIFwiQGF3cy1zZGsvcHJvcGVydHktcHJvdmlkZXJcIjtcbmltcG9ydCB7IENyZWRlbnRpYWxzLCBQcm92aWRlciB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5pbXBvcnQgeyBDb2duaXRvUHJvdmlkZXJQYXJhbWV0ZXJzIH0gZnJvbSBcIi4vQ29nbml0b1Byb3ZpZGVyUGFyYW1ldGVyc1wiO1xuaW1wb3J0IHsgcmVzb2x2ZUxvZ2lucyB9IGZyb20gXCIuL3Jlc29sdmVMb2dpbnNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDb2duaXRvSWRlbnRpdHlDcmVkZW50aWFscyBleHRlbmRzIENyZWRlbnRpYWxzIHtcbiAgLyoqXG4gICAqIFRoZSBDb2duaXRvIElEIHJldHVybmVkIGJ5IHRoZSBsYXN0IGNhbGwgdG8gQVdTLkNvZ25pdG9JZGVudGl0eS5nZXRPcGVuSWRUb2tlbigpLlxuICAgKi9cbiAgaWRlbnRpdHlJZDogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBDb2duaXRvSWRlbnRpdHlDcmVkZW50aWFsUHJvdmlkZXIgPSBQcm92aWRlcjxDb2duaXRvSWRlbnRpdHlDcmVkZW50aWFscz47XG5cbi8qKlxuICogUmV0cmlldmVzIHRlbXBvcmFyeSBBV1MgY3JlZGVudGlhbHMgdXNpbmcgQW1hem9uIENvZ25pdG8nc1xuICogYEdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHlgIG9wZXJhdGlvbi5cbiAqXG4gKiBSZXN1bHRzIGZyb20gdGhpcyBmdW5jdGlvbiBjYWxsIGFyZSBub3QgY2FjaGVkIGludGVybmFsbHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQ29nbml0b0lkZW50aXR5KHBhcmFtZXRlcnM6IEZyb21Db2duaXRvSWRlbnRpdHlQYXJhbWV0ZXJzKTogQ29nbml0b0lkZW50aXR5Q3JlZGVudGlhbFByb3ZpZGVyIHtcbiAgcmV0dXJuIGFzeW5jICgpOiBQcm9taXNlPENvZ25pdG9JZGVudGl0eUNyZWRlbnRpYWxzPiA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgQ3JlZGVudGlhbHM6IHtcbiAgICAgICAgQWNjZXNzS2V5SWQgPSB0aHJvd09uTWlzc2luZ0FjY2Vzc0tleUlkKCksXG4gICAgICAgIEV4cGlyYXRpb24sXG4gICAgICAgIFNlY3JldEtleSA9IHRocm93T25NaXNzaW5nU2VjcmV0S2V5KCksXG4gICAgICAgIFNlc3Npb25Ub2tlbixcbiAgICAgIH0gPSB0aHJvd09uTWlzc2luZ0NyZWRlbnRpYWxzKCksXG4gICAgfSA9IGF3YWl0IHBhcmFtZXRlcnMuY2xpZW50LnNlbmQoXG4gICAgICBuZXcgR2V0Q3JlZGVudGlhbHNGb3JJZGVudGl0eUNvbW1hbmQoe1xuICAgICAgICBDdXN0b21Sb2xlQXJuOiBwYXJhbWV0ZXJzLmN1c3RvbVJvbGVBcm4sXG4gICAgICAgIElkZW50aXR5SWQ6IHBhcmFtZXRlcnMuaWRlbnRpdHlJZCxcbiAgICAgICAgTG9naW5zOiBwYXJhbWV0ZXJzLmxvZ2lucyA/IGF3YWl0IHJlc29sdmVMb2dpbnMocGFyYW1ldGVycy5sb2dpbnMpIDogdW5kZWZpbmVkLFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkZW50aXR5SWQ6IHBhcmFtZXRlcnMuaWRlbnRpdHlJZCxcbiAgICAgIGFjY2Vzc0tleUlkOiBBY2Nlc3NLZXlJZCxcbiAgICAgIHNlY3JldEFjY2Vzc0tleTogU2VjcmV0S2V5LFxuICAgICAgc2Vzc2lvblRva2VuOiBTZXNzaW9uVG9rZW4sXG4gICAgICBleHBpcmF0aW9uOiBFeHBpcmF0aW9uLFxuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRnJvbUNvZ25pdG9JZGVudGl0eVBhcmFtZXRlcnMgZXh0ZW5kcyBDb2duaXRvUHJvdmlkZXJQYXJhbWV0ZXJzIHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGlkZW50aXR5IGFnYWluc3Qgd2hpY2ggY3JlZGVudGlhbHMgd2lsbCBiZVxuICAgKiBpc3N1ZWQuXG4gICAqL1xuICBpZGVudGl0eUlkOiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIHRocm93T25NaXNzaW5nQWNjZXNzS2V5SWQoKTogbmV2ZXIge1xuICB0aHJvdyBuZXcgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFwiUmVzcG9uc2UgZnJvbSBBbWF6b24gQ29nbml0byBjb250YWluZWQgbm8gYWNjZXNzIGtleSBJRFwiKTtcbn1cblxuZnVuY3Rpb24gdGhyb3dPbk1pc3NpbmdDcmVkZW50aWFscygpOiBuZXZlciB7XG4gIHRocm93IG5ldyBDcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IoXCJSZXNwb25zZSBmcm9tIEFtYXpvbiBDb2duaXRvIGNvbnRhaW5lZCBubyBjcmVkZW50aWFsc1wiKTtcbn1cblxuZnVuY3Rpb24gdGhyb3dPbk1pc3NpbmdTZWNyZXRLZXkoKTogbmV2ZXIge1xuICB0aHJvdyBuZXcgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFwiUmVzcG9uc2UgZnJvbSBBbWF6b24gQ29nbml0byBjb250YWluZWQgbm8gc2VjcmV0IGtleVwiKTtcbn1cbiJdfQ==