import { __awaiter, __generator } from "tslib";
import { GetCredentialsForIdentityCommand } from "@aws-sdk/client-cognito-identity";
import { CredentialsProviderError } from "@aws-sdk/property-provider";
import { resolveLogins } from "./resolveLogins";
/**
 * Retrieves temporary AWS credentials using Amazon Cognito's
 * `GetCredentialsForIdentity` operation.
 *
 * Results from this function call are not cached internally.
 */
export function fromCognitoIdentity(parameters) {
    var _this = this;
    return function () { return __awaiter(_this, void 0, void 0, function () {
        var _a, _b, _c, AccessKeyId, Expiration, _d, SecretKey, SessionToken, _e, _f, _g, _h;
        var _j;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    _f = (_e = parameters.client).send;
                    _g = GetCredentialsForIdentityCommand.bind;
                    _j = {
                        CustomRoleArn: parameters.customRoleArn,
                        IdentityId: parameters.identityId
                    };
                    if (!parameters.logins) return [3 /*break*/, 2];
                    return [4 /*yield*/, resolveLogins(parameters.logins)];
                case 1:
                    _h = _k.sent();
                    return [3 /*break*/, 3];
                case 2:
                    _h = undefined;
                    _k.label = 3;
                case 3: return [4 /*yield*/, _f.apply(_e, [new (_g.apply(GetCredentialsForIdentityCommand, [void 0, (_j.Logins = _h,
                                _j)]))()])];
                case 4:
                    _a = (_k.sent()).Credentials, _b = _a === void 0 ? throwOnMissingCredentials() : _a, _c = _b.AccessKeyId, AccessKeyId = _c === void 0 ? throwOnMissingAccessKeyId() : _c, Expiration = _b.Expiration, _d = _b.SecretKey, SecretKey = _d === void 0 ? throwOnMissingSecretKey() : _d, SessionToken = _b.SessionToken;
                    return [2 /*return*/, {
                            identityId: parameters.identityId,
                            accessKeyId: AccessKeyId,
                            secretAccessKey: SecretKey,
                            sessionToken: SessionToken,
                            expiration: Expiration,
                        }];
            }
        });
    }); };
}
function throwOnMissingAccessKeyId() {
    throw new CredentialsProviderError("Response from Amazon Cognito contained no access key ID");
}
function throwOnMissingCredentials() {
    throw new CredentialsProviderError("Response from Amazon Cognito contained no credentials");
}
function throwOnMissingSecretKey() {
    throw new CredentialsProviderError("Response from Amazon Cognito contained no secret key");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbUNvZ25pdG9JZGVudGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mcm9tQ29nbml0b0lkZW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNwRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUl0RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFXaEQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsVUFBeUM7SUFBN0UsaUJBeUJDO0lBeEJDLE9BQU87Ozs7OztvQkFRSyxLQUFBLENBQUEsS0FBQSxVQUFVLENBQUMsTUFBTSxDQUFBLENBQUMsSUFBSSxDQUFBO3lCQUMxQixnQ0FBZ0M7O3dCQUNsQyxhQUFhLEVBQUUsVUFBVSxDQUFDLGFBQWE7d0JBQ3ZDLFVBQVUsRUFBRSxVQUFVLENBQUMsVUFBVTs7eUJBQ3pCLFVBQVUsQ0FBQyxNQUFNLEVBQWpCLHdCQUFpQjtvQkFBRyxxQkFBTSxhQUFhLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFBOztvQkFBdEMsS0FBQSxTQUFzQyxDQUFBOzs7b0JBQUcsS0FBQSxTQUFTLENBQUE7O3dCQUo5RSxxQkFBTSxjQUNSLGNBQUksZ0NBQWdDLFlBR2xDLFNBQU0sS0FBd0U7d0NBQzlFLEVBQ0gsRUFBQTs7b0JBWkMsS0FNRSxDQUFBLFNBTUgsQ0FBQSxZQVBnQyxFQUwvQixxQkFLSSx5QkFBeUIsRUFBRSxLQUFBLEVBSjdCLG1CQUF5QyxFQUF6QyxXQUFXLG1CQUFHLHlCQUF5QixFQUFFLEtBQUEsRUFDekMsVUFBVSxnQkFBQSxFQUNWLGlCQUFxQyxFQUFyQyxTQUFTLG1CQUFHLHVCQUF1QixFQUFFLEtBQUEsRUFDckMsWUFBWSxrQkFBQTtvQkFVaEIsc0JBQU87NEJBQ0wsVUFBVSxFQUFFLFVBQVUsQ0FBQyxVQUFVOzRCQUNqQyxXQUFXLEVBQUUsV0FBVzs0QkFDeEIsZUFBZSxFQUFFLFNBQVM7NEJBQzFCLFlBQVksRUFBRSxZQUFZOzRCQUMxQixVQUFVLEVBQUUsVUFBVTt5QkFDdkIsRUFBQzs7O1NBQ0gsQ0FBQztBQUNKLENBQUM7QUFVRCxTQUFTLHlCQUF5QjtJQUNoQyxNQUFNLElBQUksd0JBQXdCLENBQUMseURBQXlELENBQUMsQ0FBQztBQUNoRyxDQUFDO0FBRUQsU0FBUyx5QkFBeUI7SUFDaEMsTUFBTSxJQUFJLHdCQUF3QixDQUFDLHVEQUF1RCxDQUFDLENBQUM7QUFDOUYsQ0FBQztBQUVELFNBQVMsdUJBQXVCO0lBQzlCLE1BQU0sSUFBSSx3QkFBd0IsQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO0FBQzdGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHZXRDcmVkZW50aWFsc0ZvcklkZW50aXR5Q29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtY29nbml0by1pZGVudGl0eVwiO1xuaW1wb3J0IHsgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yIH0gZnJvbSBcIkBhd3Mtc2RrL3Byb3BlcnR5LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBDcmVkZW50aWFscywgUHJvdmlkZXIgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuaW1wb3J0IHsgQ29nbml0b1Byb3ZpZGVyUGFyYW1ldGVycyB9IGZyb20gXCIuL0NvZ25pdG9Qcm92aWRlclBhcmFtZXRlcnNcIjtcbmltcG9ydCB7IHJlc29sdmVMb2dpbnMgfSBmcm9tIFwiLi9yZXNvbHZlTG9naW5zXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29nbml0b0lkZW50aXR5Q3JlZGVudGlhbHMgZXh0ZW5kcyBDcmVkZW50aWFscyB7XG4gIC8qKlxuICAgKiBUaGUgQ29nbml0byBJRCByZXR1cm5lZCBieSB0aGUgbGFzdCBjYWxsIHRvIEFXUy5Db2duaXRvSWRlbnRpdHkuZ2V0T3BlbklkVG9rZW4oKS5cbiAgICovXG4gIGlkZW50aXR5SWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgQ29nbml0b0lkZW50aXR5Q3JlZGVudGlhbFByb3ZpZGVyID0gUHJvdmlkZXI8Q29nbml0b0lkZW50aXR5Q3JlZGVudGlhbHM+O1xuXG4vKipcbiAqIFJldHJpZXZlcyB0ZW1wb3JhcnkgQVdTIGNyZWRlbnRpYWxzIHVzaW5nIEFtYXpvbiBDb2duaXRvJ3NcbiAqIGBHZXRDcmVkZW50aWFsc0ZvcklkZW50aXR5YCBvcGVyYXRpb24uXG4gKlxuICogUmVzdWx0cyBmcm9tIHRoaXMgZnVuY3Rpb24gY2FsbCBhcmUgbm90IGNhY2hlZCBpbnRlcm5hbGx5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUNvZ25pdG9JZGVudGl0eShwYXJhbWV0ZXJzOiBGcm9tQ29nbml0b0lkZW50aXR5UGFyYW1ldGVycyk6IENvZ25pdG9JZGVudGl0eUNyZWRlbnRpYWxQcm92aWRlciB7XG4gIHJldHVybiBhc3luYyAoKTogUHJvbWlzZTxDb2duaXRvSWRlbnRpdHlDcmVkZW50aWFscz4gPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIENyZWRlbnRpYWxzOiB7XG4gICAgICAgIEFjY2Vzc0tleUlkID0gdGhyb3dPbk1pc3NpbmdBY2Nlc3NLZXlJZCgpLFxuICAgICAgICBFeHBpcmF0aW9uLFxuICAgICAgICBTZWNyZXRLZXkgPSB0aHJvd09uTWlzc2luZ1NlY3JldEtleSgpLFxuICAgICAgICBTZXNzaW9uVG9rZW4sXG4gICAgICB9ID0gdGhyb3dPbk1pc3NpbmdDcmVkZW50aWFscygpLFxuICAgIH0gPSBhd2FpdCBwYXJhbWV0ZXJzLmNsaWVudC5zZW5kKFxuICAgICAgbmV3IEdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHlDb21tYW5kKHtcbiAgICAgICAgQ3VzdG9tUm9sZUFybjogcGFyYW1ldGVycy5jdXN0b21Sb2xlQXJuLFxuICAgICAgICBJZGVudGl0eUlkOiBwYXJhbWV0ZXJzLmlkZW50aXR5SWQsXG4gICAgICAgIExvZ2luczogcGFyYW1ldGVycy5sb2dpbnMgPyBhd2FpdCByZXNvbHZlTG9naW5zKHBhcmFtZXRlcnMubG9naW5zKSA6IHVuZGVmaW5lZCxcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICBpZGVudGl0eUlkOiBwYXJhbWV0ZXJzLmlkZW50aXR5SWQsXG4gICAgICBhY2Nlc3NLZXlJZDogQWNjZXNzS2V5SWQsXG4gICAgICBzZWNyZXRBY2Nlc3NLZXk6IFNlY3JldEtleSxcbiAgICAgIHNlc3Npb25Ub2tlbjogU2Vzc2lvblRva2VuLFxuICAgICAgZXhwaXJhdGlvbjogRXhwaXJhdGlvbixcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZyb21Db2duaXRvSWRlbnRpdHlQYXJhbWV0ZXJzIGV4dGVuZHMgQ29nbml0b1Byb3ZpZGVyUGFyYW1ldGVycyB7XG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBpZGVudGl0eSBhZ2FpbnN0IHdoaWNoIGNyZWRlbnRpYWxzIHdpbGwgYmVcbiAgICogaXNzdWVkLlxuICAgKi9cbiAgaWRlbnRpdHlJZDogc3RyaW5nO1xufVxuXG5mdW5jdGlvbiB0aHJvd09uTWlzc2luZ0FjY2Vzc0tleUlkKCk6IG5ldmVyIHtcbiAgdGhyb3cgbmV3IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihcIlJlc3BvbnNlIGZyb20gQW1hem9uIENvZ25pdG8gY29udGFpbmVkIG5vIGFjY2VzcyBrZXkgSURcIik7XG59XG5cbmZ1bmN0aW9uIHRocm93T25NaXNzaW5nQ3JlZGVudGlhbHMoKTogbmV2ZXIge1xuICB0aHJvdyBuZXcgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFwiUmVzcG9uc2UgZnJvbSBBbWF6b24gQ29nbml0byBjb250YWluZWQgbm8gY3JlZGVudGlhbHNcIik7XG59XG5cbmZ1bmN0aW9uIHRocm93T25NaXNzaW5nU2VjcmV0S2V5KCk6IG5ldmVyIHtcbiAgdGhyb3cgbmV3IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihcIlJlc3BvbnNlIGZyb20gQW1hem9uIENvZ25pdG8gY29udGFpbmVkIG5vIHNlY3JldCBrZXlcIik7XG59XG4iXX0=