"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromTemporaryCredentials = void 0;
const client_sts_1 = require("@aws-sdk/client-sts");
const property_provider_1 = require("@aws-sdk/property-provider");
const fromTemporaryCredentials = (options) => {
    let stsClient;
    return async () => {
        var _a;
        const params = { ...options.params, RoleSessionName: (_a = options.params.RoleSessionName) !== null && _a !== void 0 ? _a : "aws-sdk-js-" + Date.now() };
        if (params === null || params === void 0 ? void 0 : params.SerialNumber) {
            if (!options.mfaCodeProvider) {
                throw new property_provider_1.CredentialsProviderError(`Temporary credential requires multi-factor authentication,` + ` but no MFA code callback was provided.`, false);
            }
            params.TokenCode = await options.mfaCodeProvider(params === null || params === void 0 ? void 0 : params.SerialNumber);
        }
        if (!stsClient)
            stsClient = new client_sts_1.STSClient({ ...options.clientConfig, credentials: options.masterCredentials });
        const { Credentials } = await stsClient.send(new client_sts_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
            throw new property_provider_1.CredentialsProviderError(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
            accessKeyId: Credentials.AccessKeyId,
            secretAccessKey: Credentials.SecretAccessKey,
            sessionToken: Credentials.SessionToken,
            expiration: Credentials.Expiration,
        };
    };
};
exports.fromTemporaryCredentials = fromTemporaryCredentials;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbVRlbXBvcmFyeUNyZWRlbnRpYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Zyb21UZW1wb3JhcnlDcmVkZW50aWFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvREFBNEc7QUFDNUcsa0VBQXNFO0FBK0MvRCxNQUFNLHdCQUF3QixHQUFHLENBQUMsT0FBd0MsRUFBc0IsRUFBRTtJQUN2RyxJQUFJLFNBQW9CLENBQUM7SUFDekIsT0FBTyxLQUFLLElBQTBCLEVBQUU7O1FBQ3RDLE1BQU0sTUFBTSxHQUFHLEVBQUUsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLGVBQWUsRUFBRSxNQUFBLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxtQ0FBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7UUFDcEgsSUFBSSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsWUFBWSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFO2dCQUM1QixNQUFNLElBQUksNENBQXdCLENBQ2hDLDREQUE0RCxHQUFHLHlDQUF5QyxFQUN4RyxLQUFLLENBQ04sQ0FBQzthQUNIO1lBQ0QsTUFBTSxDQUFDLFNBQVMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxlQUFlLENBQUMsTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3hFO1FBQ0QsSUFBSSxDQUFDLFNBQVM7WUFBRSxTQUFTLEdBQUcsSUFBSSxzQkFBUyxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1FBQy9HLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxNQUFNLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSw4QkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQzVFLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRTtZQUM1RSxNQUFNLElBQUksNENBQXdCLENBQUMsdURBQXVELE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQzdHO1FBQ0QsT0FBTztZQUNMLFdBQVcsRUFBRSxXQUFXLENBQUMsV0FBVztZQUNwQyxlQUFlLEVBQUUsV0FBVyxDQUFDLGVBQWU7WUFDNUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxZQUFZO1lBQ3RDLFVBQVUsRUFBRSxXQUFXLENBQUMsVUFBVTtTQUNuQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBekJXLFFBQUEsd0JBQXdCLDRCQXlCbkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3N1bWVSb2xlQ29tbWFuZCwgQXNzdW1lUm9sZUNvbW1hbmRJbnB1dCwgU1RTQ2xpZW50LCBTVFNDbGllbnRDb25maWcgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LXN0c1wiO1xuaW1wb3J0IHsgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yIH0gZnJvbSBcIkBhd3Mtc2RrL3Byb3BlcnR5LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBDcmVkZW50aWFsUHJvdmlkZXIsIENyZWRlbnRpYWxzIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRnJvbVRlbXBvcmFyeUNyZWRlbnRpYWxzT3B0aW9ucyB7XG4gIHBhcmFtczogT21pdDxBc3N1bWVSb2xlQ29tbWFuZElucHV0LCBcIlJvbGVTZXNzaW9uTmFtZVwiPiAmIHsgUm9sZVNlc3Npb25OYW1lPzogc3RyaW5nIH07XG4gIG1hc3RlckNyZWRlbnRpYWxzPzogQ3JlZGVudGlhbHMgfCBDcmVkZW50aWFsUHJvdmlkZXI7XG4gIGNsaWVudENvbmZpZz86IFNUU0NsaWVudENvbmZpZztcbiAgbWZhQ29kZVByb3ZpZGVyPzogKG1mYVNlcmlhbDogc3RyaW5nKSA9PiBQcm9taXNlPHN0cmluZz47XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNyZWRlbnRpYWwgcHJvdmlkZXIgZnVuY3Rpb24gdGhhdCByZXRyaWV2ZXMgdGVtcG9yYXJ5IGNyZWRlbnRpYWxzIGZyb20gU1RTIEFzc3VtZVJvbGUgQVBJLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCB7IGZyb21UZW1wb3JhcnlDcmVkZW50aWFscyB9IGZyb20gXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyc1wiOyAvLyBFUzYgaW1wb3J0XG4gKiAvLyBjb25zdCB7IGZyb21UZW1wb3JhcnlDcmVkZW50aWFscyB9ID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXJzXCIpOyAvLyBDb21tb25KUyBpbXBvcnRcbiAqXG4gKiBjb25zdCBjbGllbnQgPSBuZXcgRm9vQ2xpZW50KHtcbiAqICAgcmVnaW9uLFxuICogICBjcmVkZW50aWFsczogZnJvbVRlbXBvcmFyeUNyZWRlbnRpYWxzKFxuICogICAgIC8vIE9wdGlvbmFsLiBUaGUgbWFzdGVyIGNyZWRlbnRpYWxzIHVzZWQgdG8gZ2V0IGFuZCByZWZyZXNoIHRlbXBvcmFyeSBjcmVkZW50aWFscyBmcm9tIEFXUyBTVFMuIElmIHNraXBwZWQsIGl0IHVzZXNcbiAqICAgICAvLyB0aGUgZGVmYXVsdCBjcmVkZW50aWFsIHJlc29sdmVkIGJ5IGludGVybmFsIFNUUyBjbGllbnQuXG4gKiAgICAgbWFzdGVyQ3JlZGVudGlhbHM6IGZyb21UZW1wb3JhcnlDcmVkZW50aWFscyh7XG4gKiAgICAgICBwYXJhbXM6IHsgUm9sZUFybjogXCJhcm46YXdzOmlhbTo6MTIzNDU2Nzg5MDpyb2xlL1JvbGVBXCIgfVxuICogICAgIH0pLFxuICogICAgIC8vIFJlcXVpcmVkLiBPcHRpb25zIHBhc3NlZCB0byBTVFMgQXNzdW1lUm9sZSBvcGVyYXRpb24uXG4gKiAgICAgcGFyYW1zOiB7XG4gKiAgICAgICAvLyBSZXF1aXJlZC4gQVJOIG9mIHJvbGUgdG8gYXNzdW1lLlxuICogICAgICAgUm9sZUFybjogXCJhcm46YXdzOmlhbTo6MTIzNDU2Nzg5MDpyb2xlL1JvbGVCXCIsXG4gKiAgICAgICAvLyBPcHRpb25hbC4gQW4gaWRlbnRpZmllciBmb3IgdGhlIGFzc3VtZWQgcm9sZSBzZXNzaW9uLiBJZiBza2lwcGVkLCBpdCBnZW5lcmF0ZXMgYSByYW5kb20gc2Vzc2lvbiBuYW1lIHdpdGhcbiAqICAgICAgIC8vIHByZWZpeCBvZiAnYXdzLXNkay1qcy0nLlxuICogICAgICAgUm9sZVNlc3Npb25OYW1lOiBcImF3cy1zZGstanMtMTIzXCIsXG4gKiAgICAgICAvLyBPcHRpb25hbC4gVGhlIGR1cmF0aW9uLCBpbiBzZWNvbmRzLCBvZiB0aGUgcm9sZSBzZXNzaW9uLlxuICogICAgICAgRHVyYXRpb25TZWNvbmRzOiAzNjAwXG4gKiAgICAgICAvLy4uLiBGb3IgbW9yZSBvcHRpb25zIHNlZSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vU1RTL2xhdGVzdC9BUElSZWZlcmVuY2UvQVBJX0Fzc3VtZVJvbGUuaHRtbFxuICogICAgIH0sXG4gKiAgICAgLy8gT3B0aW9uYWwuIEN1c3RvbSBTVFMgY2xpZW50IGNvbmZpZ3VyYXRpb25zIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHQgb25lcy5cbiAqICAgICBjbGllbnRDb25maWc6IHsgcmVnaW9uIH0sXG4gKiAgICAgLy8gT3B0aW9uYWwuIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgcHJvbWlzZSBmdWxmaWxsZWQgd2l0aCBhbiBNRkEgdG9rZW4gY29kZSBmb3IgdGhlIHByb3ZpZGVkIE1GQSBTZXJpYWwgY29kZS5cbiAqICAgICAvLyBSZXF1aXJlZCBpZiBgcGFyYW1zYCBoYXMgYFNlcmlhbE51bWJlcmAgY29uZmlnLlxuICogICAgIG1mYUNvZGVQcm92aWRlcjogYXN5bmMgbWZhU2VyaWFsID0+IHtcbiAqICAgICAgIHJldHVybiBcInRva2VuXCJcbiAqICAgICB9XG4gKiAgICksXG4gKiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgY29uc3QgZnJvbVRlbXBvcmFyeUNyZWRlbnRpYWxzID0gKG9wdGlvbnM6IEZyb21UZW1wb3JhcnlDcmVkZW50aWFsc09wdGlvbnMpOiBDcmVkZW50aWFsUHJvdmlkZXIgPT4ge1xuICBsZXQgc3RzQ2xpZW50OiBTVFNDbGllbnQ7XG4gIHJldHVybiBhc3luYyAoKTogUHJvbWlzZTxDcmVkZW50aWFscz4gPT4ge1xuICAgIGNvbnN0IHBhcmFtcyA9IHsgLi4ub3B0aW9ucy5wYXJhbXMsIFJvbGVTZXNzaW9uTmFtZTogb3B0aW9ucy5wYXJhbXMuUm9sZVNlc3Npb25OYW1lID8/IFwiYXdzLXNkay1qcy1cIiArIERhdGUubm93KCkgfTtcbiAgICBpZiAocGFyYW1zPy5TZXJpYWxOdW1iZXIpIHtcbiAgICAgIGlmICghb3B0aW9ucy5tZmFDb2RlUHJvdmlkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihcbiAgICAgICAgICBgVGVtcG9yYXJ5IGNyZWRlbnRpYWwgcmVxdWlyZXMgbXVsdGktZmFjdG9yIGF1dGhlbnRpY2F0aW9uLGAgKyBgIGJ1dCBubyBNRkEgY29kZSBjYWxsYmFjayB3YXMgcHJvdmlkZWQuYCxcbiAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcGFyYW1zLlRva2VuQ29kZSA9IGF3YWl0IG9wdGlvbnMubWZhQ29kZVByb3ZpZGVyKHBhcmFtcz8uU2VyaWFsTnVtYmVyKTtcbiAgICB9XG4gICAgaWYgKCFzdHNDbGllbnQpIHN0c0NsaWVudCA9IG5ldyBTVFNDbGllbnQoeyAuLi5vcHRpb25zLmNsaWVudENvbmZpZywgY3JlZGVudGlhbHM6IG9wdGlvbnMubWFzdGVyQ3JlZGVudGlhbHMgfSk7XG4gICAgY29uc3QgeyBDcmVkZW50aWFscyB9ID0gYXdhaXQgc3RzQ2xpZW50LnNlbmQobmV3IEFzc3VtZVJvbGVDb21tYW5kKHBhcmFtcykpO1xuICAgIGlmICghQ3JlZGVudGlhbHMgfHwgIUNyZWRlbnRpYWxzLkFjY2Vzc0tleUlkIHx8ICFDcmVkZW50aWFscy5TZWNyZXRBY2Nlc3NLZXkpIHtcbiAgICAgIHRocm93IG5ldyBDcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IoYEludmFsaWQgcmVzcG9uc2UgZnJvbSBTVFMuYXNzdW1lUm9sZSBjYWxsIHdpdGggcm9sZSAke3BhcmFtcy5Sb2xlQXJufWApO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgYWNjZXNzS2V5SWQ6IENyZWRlbnRpYWxzLkFjY2Vzc0tleUlkLFxuICAgICAgc2VjcmV0QWNjZXNzS2V5OiBDcmVkZW50aWFscy5TZWNyZXRBY2Nlc3NLZXksXG4gICAgICBzZXNzaW9uVG9rZW46IENyZWRlbnRpYWxzLlNlc3Npb25Ub2tlbixcbiAgICAgIGV4cGlyYXRpb246IENyZWRlbnRpYWxzLkV4cGlyYXRpb24sXG4gICAgfTtcbiAgfTtcbn07XG4iXX0=