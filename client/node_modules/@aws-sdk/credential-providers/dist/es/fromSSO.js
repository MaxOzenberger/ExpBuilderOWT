import { __assign } from "tslib";
import { SSOClient } from "@aws-sdk/client-sso";
import { fromSSO as _fromSSO } from "@aws-sdk/credential-provider-sso";
/**
 * Creates a credential provider function that reads from the _resolved_ access token from local disk then requests
 * temporary AWS credentials.
 *
 * You can create the `CredentialProvider` functions using the inline SSO parameters(`ssoStartUrl`, `ssoAccountId`,
 * `ssoRegion`, `ssoRoleName`) or load them from [AWS SDKs and Tools shared configuration and credentials files](https://docs.aws.amazon.com/credref/latest/refdocs/creds-config-files.html).
 * Profiles in the `credentials` file are given precedence over profiles in the `config` file.
 *
 * ```javascript
 * import { fromSSO } from "@aws-sdk/credential-providers"; // ES6 import
 * // const { fromSSO } = require(@aws-sdk/credential-providers") // CommonJS import
 *
 * const client = new FooClient({
 *   credentials: fromSSO({
 *     // Optional. The configuration profile to use. If not specified, the provider will use the value in the
 *     // `AWS_PROFILE` environment variable or `default` by default.
 *     profile: "my-sso-profile",
 *     // Optional. The path to the shared credentials file. If not specified, the provider will use the value in the
 *     // `AWS_SHARED_CREDENTIALS_FILE` environment variable or a default of `~/.aws/credentials`.
 *     filepath: "~/.aws/credentials",
 *     // Optional. The path to the shared config file. If not specified, the provider will use the value in the
 *     // `AWS_CONFIG_FILE` environment variable or a default of `~/.aws/config`.
 *     configFilepath: "~/.aws/config",
 *     // Optional. The URL to the AWS SSO service. Required if any of the `sso*` options(except for `ssoClient`) is
 *     // provided.
 *     ssoStartUrl: "https://d-abc123.awsapps.com/start",
 *     // Optional. The ID of the AWS account to use for temporary credentials. Required if any of the `sso*`
 *     // options(except for `ssoClient`) is provided.
 *     ssoAccountId: "1234567890",
 *     // Optional. The AWS region to use for temporary credentials. Required if any of the `sso*` options(except for
 *     // `ssoClient`) is provided.
 *     ssoRegion: "us-east-1",
 *     // Optional. The name of the AWS role to assume. Required if any of the `sso*` options(except for `ssoClient`) is
 *     // provided.
 *     ssoRoleName: "SampleRole",
 *     // Optional. Overwrite the configuration used construct the SSO service client.
 *     clientConfig: { region },
 *   }),
 * });
 * ```
 */
export var fromSSO = function (init) {
    if (init === void 0) { init = {}; }
    return _fromSSO(__assign({ ssoClient: init.clientConfig ? new SSOClient(init.clientConfig) : undefined }, init));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbVNTTy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mcm9tU1NPLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFtQixNQUFNLHFCQUFxQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxPQUFPLElBQUksUUFBUSxFQUErQixNQUFNLGtDQUFrQyxDQUFDO0FBT3BHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0NHO0FBQ0gsTUFBTSxDQUFDLElBQU0sT0FBTyxHQUFHLFVBQUMsSUFBc0I7SUFBdEIscUJBQUEsRUFBQSxTQUFzQjtJQUM1QyxPQUFBLFFBQVEsVUFBTSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFLLElBQUksRUFBRztBQUF6RyxDQUF5RyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU1NPQ2xpZW50LCBTU09DbGllbnRDb25maWcgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LXNzb1wiO1xuaW1wb3J0IHsgZnJvbVNTTyBhcyBfZnJvbVNTTywgRnJvbVNTT0luaXQgYXMgX0Zyb21TU09Jbml0IH0gZnJvbSBcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItc3NvXCI7XG5pbXBvcnQgeyBDcmVkZW50aWFsUHJvdmlkZXIgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBGcm9tU1NPSW5pdCBleHRlbmRzIE9taXQ8X0Zyb21TU09Jbml0LCBcImNsaWVudFwiPiB7XG4gIGNsaWVudENvbmZpZz86IFNTT0NsaWVudENvbmZpZztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY3JlZGVudGlhbCBwcm92aWRlciBmdW5jdGlvbiB0aGF0IHJlYWRzIGZyb20gdGhlIF9yZXNvbHZlZF8gYWNjZXNzIHRva2VuIGZyb20gbG9jYWwgZGlzayB0aGVuIHJlcXVlc3RzXG4gKiB0ZW1wb3JhcnkgQVdTIGNyZWRlbnRpYWxzLlxuICpcbiAqIFlvdSBjYW4gY3JlYXRlIHRoZSBgQ3JlZGVudGlhbFByb3ZpZGVyYCBmdW5jdGlvbnMgdXNpbmcgdGhlIGlubGluZSBTU08gcGFyYW1ldGVycyhgc3NvU3RhcnRVcmxgLCBgc3NvQWNjb3VudElkYCxcbiAqIGBzc29SZWdpb25gLCBgc3NvUm9sZU5hbWVgKSBvciBsb2FkIHRoZW0gZnJvbSBbQVdTIFNES3MgYW5kIFRvb2xzIHNoYXJlZCBjb25maWd1cmF0aW9uIGFuZCBjcmVkZW50aWFscyBmaWxlc10oaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2NyZWRyZWYvbGF0ZXN0L3JlZmRvY3MvY3JlZHMtY29uZmlnLWZpbGVzLmh0bWwpLlxuICogUHJvZmlsZXMgaW4gdGhlIGBjcmVkZW50aWFsc2AgZmlsZSBhcmUgZ2l2ZW4gcHJlY2VkZW5jZSBvdmVyIHByb2ZpbGVzIGluIHRoZSBgY29uZmlnYCBmaWxlLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCB7IGZyb21TU08gfSBmcm9tIFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlcnNcIjsgLy8gRVM2IGltcG9ydFxuICogLy8gY29uc3QgeyBmcm9tU1NPIH0gPSByZXF1aXJlKEBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXJzXCIpIC8vIENvbW1vbkpTIGltcG9ydFxuICpcbiAqIGNvbnN0IGNsaWVudCA9IG5ldyBGb29DbGllbnQoe1xuICogICBjcmVkZW50aWFsczogZnJvbVNTTyh7XG4gKiAgICAgLy8gT3B0aW9uYWwuIFRoZSBjb25maWd1cmF0aW9uIHByb2ZpbGUgdG8gdXNlLiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgcHJvdmlkZXIgd2lsbCB1c2UgdGhlIHZhbHVlIGluIHRoZVxuICogICAgIC8vIGBBV1NfUFJPRklMRWAgZW52aXJvbm1lbnQgdmFyaWFibGUgb3IgYGRlZmF1bHRgIGJ5IGRlZmF1bHQuXG4gKiAgICAgcHJvZmlsZTogXCJteS1zc28tcHJvZmlsZVwiLFxuICogICAgIC8vIE9wdGlvbmFsLiBUaGUgcGF0aCB0byB0aGUgc2hhcmVkIGNyZWRlbnRpYWxzIGZpbGUuIElmIG5vdCBzcGVjaWZpZWQsIHRoZSBwcm92aWRlciB3aWxsIHVzZSB0aGUgdmFsdWUgaW4gdGhlXG4gKiAgICAgLy8gYEFXU19TSEFSRURfQ1JFREVOVElBTFNfRklMRWAgZW52aXJvbm1lbnQgdmFyaWFibGUgb3IgYSBkZWZhdWx0IG9mIGB+Ly5hd3MvY3JlZGVudGlhbHNgLlxuICogICAgIGZpbGVwYXRoOiBcIn4vLmF3cy9jcmVkZW50aWFsc1wiLFxuICogICAgIC8vIE9wdGlvbmFsLiBUaGUgcGF0aCB0byB0aGUgc2hhcmVkIGNvbmZpZyBmaWxlLiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgcHJvdmlkZXIgd2lsbCB1c2UgdGhlIHZhbHVlIGluIHRoZVxuICogICAgIC8vIGBBV1NfQ09ORklHX0ZJTEVgIGVudmlyb25tZW50IHZhcmlhYmxlIG9yIGEgZGVmYXVsdCBvZiBgfi8uYXdzL2NvbmZpZ2AuXG4gKiAgICAgY29uZmlnRmlsZXBhdGg6IFwifi8uYXdzL2NvbmZpZ1wiLFxuICogICAgIC8vIE9wdGlvbmFsLiBUaGUgVVJMIHRvIHRoZSBBV1MgU1NPIHNlcnZpY2UuIFJlcXVpcmVkIGlmIGFueSBvZiB0aGUgYHNzbypgIG9wdGlvbnMoZXhjZXB0IGZvciBgc3NvQ2xpZW50YCkgaXNcbiAqICAgICAvLyBwcm92aWRlZC5cbiAqICAgICBzc29TdGFydFVybDogXCJodHRwczovL2QtYWJjMTIzLmF3c2FwcHMuY29tL3N0YXJ0XCIsXG4gKiAgICAgLy8gT3B0aW9uYWwuIFRoZSBJRCBvZiB0aGUgQVdTIGFjY291bnQgdG8gdXNlIGZvciB0ZW1wb3JhcnkgY3JlZGVudGlhbHMuIFJlcXVpcmVkIGlmIGFueSBvZiB0aGUgYHNzbypgXG4gKiAgICAgLy8gb3B0aW9ucyhleGNlcHQgZm9yIGBzc29DbGllbnRgKSBpcyBwcm92aWRlZC5cbiAqICAgICBzc29BY2NvdW50SWQ6IFwiMTIzNDU2Nzg5MFwiLFxuICogICAgIC8vIE9wdGlvbmFsLiBUaGUgQVdTIHJlZ2lvbiB0byB1c2UgZm9yIHRlbXBvcmFyeSBjcmVkZW50aWFscy4gUmVxdWlyZWQgaWYgYW55IG9mIHRoZSBgc3NvKmAgb3B0aW9ucyhleGNlcHQgZm9yXG4gKiAgICAgLy8gYHNzb0NsaWVudGApIGlzIHByb3ZpZGVkLlxuICogICAgIHNzb1JlZ2lvbjogXCJ1cy1lYXN0LTFcIixcbiAqICAgICAvLyBPcHRpb25hbC4gVGhlIG5hbWUgb2YgdGhlIEFXUyByb2xlIHRvIGFzc3VtZS4gUmVxdWlyZWQgaWYgYW55IG9mIHRoZSBgc3NvKmAgb3B0aW9ucyhleGNlcHQgZm9yIGBzc29DbGllbnRgKSBpc1xuICogICAgIC8vIHByb3ZpZGVkLlxuICogICAgIHNzb1JvbGVOYW1lOiBcIlNhbXBsZVJvbGVcIixcbiAqICAgICAvLyBPcHRpb25hbC4gT3ZlcndyaXRlIHRoZSBjb25maWd1cmF0aW9uIHVzZWQgY29uc3RydWN0IHRoZSBTU08gc2VydmljZSBjbGllbnQuXG4gKiAgICAgY2xpZW50Q29uZmlnOiB7IHJlZ2lvbiB9LFxuICogICB9KSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjb25zdCBmcm9tU1NPID0gKGluaXQ6IEZyb21TU09Jbml0ID0ge30pOiBDcmVkZW50aWFsUHJvdmlkZXIgPT5cbiAgX2Zyb21TU08oeyAuLi57IHNzb0NsaWVudDogaW5pdC5jbGllbnRDb25maWcgPyBuZXcgU1NPQ2xpZW50KGluaXQuY2xpZW50Q29uZmlnKSA6IHVuZGVmaW5lZCB9LCAuLi5pbml0IH0pO1xuIl19