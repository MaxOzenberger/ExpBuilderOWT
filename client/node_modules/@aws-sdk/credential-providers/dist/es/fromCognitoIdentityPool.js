import { __assign } from "tslib";
import { CognitoIdentityClient } from "@aws-sdk/client-cognito-identity";
import { fromCognitoIdentityPool as _fromCognitoIdentityPool, } from "@aws-sdk/credential-provider-cognito-identity";
/**
 * Creates a credential provider function that retrieves or generates a unique identifier using Amazon Cognito's `GetId`
 * operation, then generates temporary AWS credentials using Amazon Cognito's `GetCredentialsForIdentity` operation.
 *
 * Results from `GetId` are cached internally, but results from `GetCredentialsForIdentity` are not.
 *
 * ```javascript
 * import { fromCognitoIdentityPool } from "@aws-sdk/credential-providers"; // ES6 import
 * // const { fromCognitoIdentityPool } = require("@aws-sdk/credential-providers"); // CommonJS import
 *
 * const client = new FooClient({
 *   region,
 *   credentials: fromCognitoIdentityPool({
 *     // Required. The unique identifier for the identity pool from which an identity should be retrieved or generated.
 *     identityPoolId: "us-east-1:1699ebc0-7900-4099-b910-2df94f52a030";
 *     // Optional. A standard AWS account ID (9+ digits)
 *     accountId: "123456789",
 *     // Optional. A cache in which to store resolved Cognito IdentityIds.
 *     cache: custom_storage,
 *     // Optional. A unique identifier for the user used to cache Cognito IdentityIds on a per-user basis.
 *     userIdentifier: "user_0",
 *     // optional. The ARN of the role to be assumed when multiple roles were
 *     // received in the token from the identity provider.
 *     customRoleArn: "arn:aws:iam::1234567890:role/MYAPP-CognitoIdentity"
 *     // Optional. A set of name-value pairs that map provider names to provider
 *     // tokens. Required when using identities associated with external identity
 *     // providers such as Facebook.
 *     logins: {
 *       'graph.facebook.com': 'FBTOKEN',
 *       'www.amazon.com': 'AMAZONTOKEN',
 *       'accounts.google.com': 'GOOGLETOKEN',
 *       'api.twitter.com': 'TWITTERTOKEN',
 *       'www.digits.com': 'DIGITSTOKEN'
 *     },
 *     // Optional. Custom client configuration if you need overwrite default Cognito Identity client configuration.
 *     client: new CognitoIdentityClient({ region })
 *   }),
 * });
 * ```
 */
export var fromCognitoIdentityPool = function (options) {
    var _a;
    return _fromCognitoIdentityPool(__assign(__assign({}, options), { client: new CognitoIdentityClient((_a = options.clientConfig) !== null && _a !== void 0 ? _a : {}) }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbUNvZ25pdG9JZGVudGl0eVBvb2wuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZnJvbUNvZ25pdG9JZGVudGl0eVBvb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxxQkFBcUIsRUFBK0IsTUFBTSxrQ0FBa0MsQ0FBQztBQUN0RyxPQUFPLEVBRUwsdUJBQXVCLElBQUksd0JBQXdCLEdBRXBELE1BQU0sK0NBQStDLENBQUM7QUFNdkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXVDRztBQUNILE1BQU0sQ0FBQyxJQUFNLHVCQUF1QixHQUFHLFVBQ3JDLE9BQTBDOztJQUUxQyxPQUFBLHdCQUF3Qix1QkFDbkIsT0FBTyxLQUNWLE1BQU0sRUFBRSxJQUFJLHFCQUFxQixDQUFDLE1BQUEsT0FBTyxDQUFDLFlBQVksbUNBQUksRUFBRSxDQUFDLElBQzdELENBQUE7Q0FBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29nbml0b0lkZW50aXR5Q2xpZW50LCBDb2duaXRvSWRlbnRpdHlDbGllbnRDb25maWcgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWNvZ25pdG8taWRlbnRpdHlcIjtcbmltcG9ydCB7XG4gIENvZ25pdG9JZGVudGl0eUNyZWRlbnRpYWxQcm92aWRlcixcbiAgZnJvbUNvZ25pdG9JZGVudGl0eVBvb2wgYXMgX2Zyb21Db2duaXRvSWRlbnRpdHlQb29sLFxuICBGcm9tQ29nbml0b0lkZW50aXR5UG9vbFBhcmFtZXRlcnMgYXMgX0Zyb21Db2duaXRvSWRlbnRpdHlQb29sUGFyYW1ldGVycyxcbn0gZnJvbSBcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItY29nbml0by1pZGVudGl0eVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZyb21Db2duaXRvSWRlbnRpdHlQb29sUGFyYW1ldGVycyBleHRlbmRzIE9taXQ8X0Zyb21Db2duaXRvSWRlbnRpdHlQb29sUGFyYW1ldGVycywgXCJjbGllbnRcIj4ge1xuICBjbGllbnRDb25maWc/OiBDb2duaXRvSWRlbnRpdHlDbGllbnRDb25maWc7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNyZWRlbnRpYWwgcHJvdmlkZXIgZnVuY3Rpb24gdGhhdCByZXRyaWV2ZXMgb3IgZ2VuZXJhdGVzIGEgdW5pcXVlIGlkZW50aWZpZXIgdXNpbmcgQW1hem9uIENvZ25pdG8ncyBgR2V0SWRgXG4gKiBvcGVyYXRpb24sIHRoZW4gZ2VuZXJhdGVzIHRlbXBvcmFyeSBBV1MgY3JlZGVudGlhbHMgdXNpbmcgQW1hem9uIENvZ25pdG8ncyBgR2V0Q3JlZGVudGlhbHNGb3JJZGVudGl0eWAgb3BlcmF0aW9uLlxuICpcbiAqIFJlc3VsdHMgZnJvbSBgR2V0SWRgIGFyZSBjYWNoZWQgaW50ZXJuYWxseSwgYnV0IHJlc3VsdHMgZnJvbSBgR2V0Q3JlZGVudGlhbHNGb3JJZGVudGl0eWAgYXJlIG5vdC5cbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgeyBmcm9tQ29nbml0b0lkZW50aXR5UG9vbCB9IGZyb20gXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyc1wiOyAvLyBFUzYgaW1wb3J0XG4gKiAvLyBjb25zdCB7IGZyb21Db2duaXRvSWRlbnRpdHlQb29sIH0gPSByZXF1aXJlKFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlcnNcIik7IC8vIENvbW1vbkpTIGltcG9ydFxuICpcbiAqIGNvbnN0IGNsaWVudCA9IG5ldyBGb29DbGllbnQoe1xuICogICByZWdpb24sXG4gKiAgIGNyZWRlbnRpYWxzOiBmcm9tQ29nbml0b0lkZW50aXR5UG9vbCh7XG4gKiAgICAgLy8gUmVxdWlyZWQuIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGlkZW50aXR5IHBvb2wgZnJvbSB3aGljaCBhbiBpZGVudGl0eSBzaG91bGQgYmUgcmV0cmlldmVkIG9yIGdlbmVyYXRlZC5cbiAqICAgICBpZGVudGl0eVBvb2xJZDogXCJ1cy1lYXN0LTE6MTY5OWViYzAtNzkwMC00MDk5LWI5MTAtMmRmOTRmNTJhMDMwXCI7XG4gKiAgICAgLy8gT3B0aW9uYWwuIEEgc3RhbmRhcmQgQVdTIGFjY291bnQgSUQgKDkrIGRpZ2l0cylcbiAqICAgICBhY2NvdW50SWQ6IFwiMTIzNDU2Nzg5XCIsXG4gKiAgICAgLy8gT3B0aW9uYWwuIEEgY2FjaGUgaW4gd2hpY2ggdG8gc3RvcmUgcmVzb2x2ZWQgQ29nbml0byBJZGVudGl0eUlkcy5cbiAqICAgICBjYWNoZTogY3VzdG9tX3N0b3JhZ2UsXG4gKiAgICAgLy8gT3B0aW9uYWwuIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSB1c2VyIHVzZWQgdG8gY2FjaGUgQ29nbml0byBJZGVudGl0eUlkcyBvbiBhIHBlci11c2VyIGJhc2lzLlxuICogICAgIHVzZXJJZGVudGlmaWVyOiBcInVzZXJfMFwiLFxuICogICAgIC8vIG9wdGlvbmFsLiBUaGUgQVJOIG9mIHRoZSByb2xlIHRvIGJlIGFzc3VtZWQgd2hlbiBtdWx0aXBsZSByb2xlcyB3ZXJlXG4gKiAgICAgLy8gcmVjZWl2ZWQgaW4gdGhlIHRva2VuIGZyb20gdGhlIGlkZW50aXR5IHByb3ZpZGVyLlxuICogICAgIGN1c3RvbVJvbGVBcm46IFwiYXJuOmF3czppYW06OjEyMzQ1Njc4OTA6cm9sZS9NWUFQUC1Db2duaXRvSWRlbnRpdHlcIlxuICogICAgIC8vIE9wdGlvbmFsLiBBIHNldCBvZiBuYW1lLXZhbHVlIHBhaXJzIHRoYXQgbWFwIHByb3ZpZGVyIG5hbWVzIHRvIHByb3ZpZGVyXG4gKiAgICAgLy8gdG9rZW5zLiBSZXF1aXJlZCB3aGVuIHVzaW5nIGlkZW50aXRpZXMgYXNzb2NpYXRlZCB3aXRoIGV4dGVybmFsIGlkZW50aXR5XG4gKiAgICAgLy8gcHJvdmlkZXJzIHN1Y2ggYXMgRmFjZWJvb2suXG4gKiAgICAgbG9naW5zOiB7XG4gKiAgICAgICAnZ3JhcGguZmFjZWJvb2suY29tJzogJ0ZCVE9LRU4nLFxuICogICAgICAgJ3d3dy5hbWF6b24uY29tJzogJ0FNQVpPTlRPS0VOJyxcbiAqICAgICAgICdhY2NvdW50cy5nb29nbGUuY29tJzogJ0dPT0dMRVRPS0VOJyxcbiAqICAgICAgICdhcGkudHdpdHRlci5jb20nOiAnVFdJVFRFUlRPS0VOJyxcbiAqICAgICAgICd3d3cuZGlnaXRzLmNvbSc6ICdESUdJVFNUT0tFTidcbiAqICAgICB9LFxuICogICAgIC8vIE9wdGlvbmFsLiBDdXN0b20gY2xpZW50IGNvbmZpZ3VyYXRpb24gaWYgeW91IG5lZWQgb3ZlcndyaXRlIGRlZmF1bHQgQ29nbml0byBJZGVudGl0eSBjbGllbnQgY29uZmlndXJhdGlvbi5cbiAqICAgICBjbGllbnQ6IG5ldyBDb2duaXRvSWRlbnRpdHlDbGllbnQoeyByZWdpb24gfSlcbiAqICAgfSksXG4gKiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgY29uc3QgZnJvbUNvZ25pdG9JZGVudGl0eVBvb2wgPSAoXG4gIG9wdGlvbnM6IEZyb21Db2duaXRvSWRlbnRpdHlQb29sUGFyYW1ldGVyc1xuKTogQ29nbml0b0lkZW50aXR5Q3JlZGVudGlhbFByb3ZpZGVyID0+XG4gIF9mcm9tQ29nbml0b0lkZW50aXR5UG9vbCh7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBjbGllbnQ6IG5ldyBDb2duaXRvSWRlbnRpdHlDbGllbnQob3B0aW9ucy5jbGllbnRDb25maWcgPz8ge30pLFxuICB9KTtcbiJdfQ==