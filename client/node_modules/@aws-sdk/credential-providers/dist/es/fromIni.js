import { __assign } from "tslib";
import { getDefaultRoleAssumer, getDefaultRoleAssumerWithWebIdentity } from "@aws-sdk/client-sts";
import { fromIni as _fromIni } from "@aws-sdk/credential-provider-ini";
/**
 * Creates a credential provider function that reads from a shared credentials file at `~/.aws/credentials` and a
 * shared configuration file at `~/.aws/config`. Both files are expected to be INI formatted with section names
 * corresponding to profiles. Sections in the credentials file are treated as profile names, whereas profile sections in
 * the config file must have the format of`[profile profile-name]`, except for the default profile.
 *
 * Profiles that appear in both files will not be merged, and the version that appears in the credentials file will be
 * given precedence over the profile found in the config file.
 *
 * ```javascript
 * import { fromIni } from "@aws-sdk/credential-providers"; // ES6 import
 * // const { fromIni } = require("@aws-sdk/credential-providers"); // CommonJS import
 *
 * const client = new FooClient({
 *   credentials: fromIni({
 *     // Optional. The configuration profile to use. If not specified, the provider will use the value in the
 *     // `AWS_PROFILE` environment variable or a default of `default`.
 *     profile: "profile",
 *     // Optional. The path to the shared credentials file. If not specified, the provider will use the value in the
 *     // `AWS_SHARED_CREDENTIALS_FILE` environment variable or a default of `~/.aws/credentials`.
 *     filepath: "~/.aws/credentials",
 *     // Optional. The path to the shared config file. If not specified, the provider will use the value in the
 *     // `AWS_CONFIG_FILE` environment variable or a default of `~/.aws/config`.
 *     configFilepath: "~/.aws/config",
 *     // Optional. A function that returns a a promise fulfilled with an MFA token code for the provided MFA Serial
 *     // code. If a profile requires an MFA code and `mfaCodeProvider` is not a valid function, the credential provider
 *     // promise will be rejected.
 *     mfaCodeProvider: async (mfaSerial) => {
 *       return "token";
 *     },
 *     // Optional. Custom STS client configurations overriding the default ones.
 *     clientConfig: { region },
 *   }),
 * });
 * ```
 */
export var fromIni = function (init) {
    var _a, _b;
    if (init === void 0) { init = {}; }
    return _fromIni(__assign(__assign({}, init), { roleAssumer: (_a = init.roleAssumer) !== null && _a !== void 0 ? _a : getDefaultRoleAssumer(init.clientConfig), roleAssumerWithWebIdentity: (_b = init.roleAssumerWithWebIdentity) !== null && _b !== void 0 ? _b : getDefaultRoleAssumerWithWebIdentity(init.clientConfig) }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbUluaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mcm9tSW5pLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsb0NBQW9DLEVBQW1CLE1BQU0scUJBQXFCLENBQUM7QUFDbkgsT0FBTyxFQUFFLE9BQU8sSUFBSSxRQUFRLEVBQStCLE1BQU0sa0NBQWtDLENBQUM7QUFPcEc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUNHO0FBQ0gsTUFBTSxDQUFDLElBQU0sT0FBTyxHQUFHLFVBQUMsSUFBc0I7O0lBQXRCLHFCQUFBLEVBQUEsU0FBc0I7SUFDNUMsT0FBQSxRQUFRLHVCQUNILElBQUksS0FDUCxXQUFXLEVBQUUsTUFBQSxJQUFJLENBQUMsV0FBVyxtQ0FBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQ3pFLDBCQUEwQixFQUN4QixNQUFBLElBQUksQ0FBQywwQkFBMEIsbUNBQUksb0NBQW9DLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUM1RixDQUFBO0NBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldERlZmF1bHRSb2xlQXNzdW1lciwgZ2V0RGVmYXVsdFJvbGVBc3N1bWVyV2l0aFdlYklkZW50aXR5LCBTVFNDbGllbnRDb25maWcgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LXN0c1wiO1xuaW1wb3J0IHsgZnJvbUluaSBhcyBfZnJvbUluaSwgRnJvbUluaUluaXQgYXMgX0Zyb21JbmlJbml0IH0gZnJvbSBcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItaW5pXCI7XG5pbXBvcnQgeyBDcmVkZW50aWFsUHJvdmlkZXIgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBGcm9tSW5pSW5pdCBleHRlbmRzIF9Gcm9tSW5pSW5pdCB7XG4gIGNsaWVudENvbmZpZz86IFNUU0NsaWVudENvbmZpZztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY3JlZGVudGlhbCBwcm92aWRlciBmdW5jdGlvbiB0aGF0IHJlYWRzIGZyb20gYSBzaGFyZWQgY3JlZGVudGlhbHMgZmlsZSBhdCBgfi8uYXdzL2NyZWRlbnRpYWxzYCBhbmQgYVxuICogc2hhcmVkIGNvbmZpZ3VyYXRpb24gZmlsZSBhdCBgfi8uYXdzL2NvbmZpZ2AuIEJvdGggZmlsZXMgYXJlIGV4cGVjdGVkIHRvIGJlIElOSSBmb3JtYXR0ZWQgd2l0aCBzZWN0aW9uIG5hbWVzXG4gKiBjb3JyZXNwb25kaW5nIHRvIHByb2ZpbGVzLiBTZWN0aW9ucyBpbiB0aGUgY3JlZGVudGlhbHMgZmlsZSBhcmUgdHJlYXRlZCBhcyBwcm9maWxlIG5hbWVzLCB3aGVyZWFzIHByb2ZpbGUgc2VjdGlvbnMgaW5cbiAqIHRoZSBjb25maWcgZmlsZSBtdXN0IGhhdmUgdGhlIGZvcm1hdCBvZmBbcHJvZmlsZSBwcm9maWxlLW5hbWVdYCwgZXhjZXB0IGZvciB0aGUgZGVmYXVsdCBwcm9maWxlLlxuICpcbiAqIFByb2ZpbGVzIHRoYXQgYXBwZWFyIGluIGJvdGggZmlsZXMgd2lsbCBub3QgYmUgbWVyZ2VkLCBhbmQgdGhlIHZlcnNpb24gdGhhdCBhcHBlYXJzIGluIHRoZSBjcmVkZW50aWFscyBmaWxlIHdpbGwgYmVcbiAqIGdpdmVuIHByZWNlZGVuY2Ugb3ZlciB0aGUgcHJvZmlsZSBmb3VuZCBpbiB0aGUgY29uZmlnIGZpbGUuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogaW1wb3J0IHsgZnJvbUluaSB9IGZyb20gXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyc1wiOyAvLyBFUzYgaW1wb3J0XG4gKiAvLyBjb25zdCB7IGZyb21JbmkgfSA9IHJlcXVpcmUoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyc1wiKTsgLy8gQ29tbW9uSlMgaW1wb3J0XG4gKlxuICogY29uc3QgY2xpZW50ID0gbmV3IEZvb0NsaWVudCh7XG4gKiAgIGNyZWRlbnRpYWxzOiBmcm9tSW5pKHtcbiAqICAgICAvLyBPcHRpb25hbC4gVGhlIGNvbmZpZ3VyYXRpb24gcHJvZmlsZSB0byB1c2UuIElmIG5vdCBzcGVjaWZpZWQsIHRoZSBwcm92aWRlciB3aWxsIHVzZSB0aGUgdmFsdWUgaW4gdGhlXG4gKiAgICAgLy8gYEFXU19QUk9GSUxFYCBlbnZpcm9ubWVudCB2YXJpYWJsZSBvciBhIGRlZmF1bHQgb2YgYGRlZmF1bHRgLlxuICogICAgIHByb2ZpbGU6IFwicHJvZmlsZVwiLFxuICogICAgIC8vIE9wdGlvbmFsLiBUaGUgcGF0aCB0byB0aGUgc2hhcmVkIGNyZWRlbnRpYWxzIGZpbGUuIElmIG5vdCBzcGVjaWZpZWQsIHRoZSBwcm92aWRlciB3aWxsIHVzZSB0aGUgdmFsdWUgaW4gdGhlXG4gKiAgICAgLy8gYEFXU19TSEFSRURfQ1JFREVOVElBTFNfRklMRWAgZW52aXJvbm1lbnQgdmFyaWFibGUgb3IgYSBkZWZhdWx0IG9mIGB+Ly5hd3MvY3JlZGVudGlhbHNgLlxuICogICAgIGZpbGVwYXRoOiBcIn4vLmF3cy9jcmVkZW50aWFsc1wiLFxuICogICAgIC8vIE9wdGlvbmFsLiBUaGUgcGF0aCB0byB0aGUgc2hhcmVkIGNvbmZpZyBmaWxlLiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgcHJvdmlkZXIgd2lsbCB1c2UgdGhlIHZhbHVlIGluIHRoZVxuICogICAgIC8vIGBBV1NfQ09ORklHX0ZJTEVgIGVudmlyb25tZW50IHZhcmlhYmxlIG9yIGEgZGVmYXVsdCBvZiBgfi8uYXdzL2NvbmZpZ2AuXG4gKiAgICAgY29uZmlnRmlsZXBhdGg6IFwifi8uYXdzL2NvbmZpZ1wiLFxuICogICAgIC8vIE9wdGlvbmFsLiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGEgcHJvbWlzZSBmdWxmaWxsZWQgd2l0aCBhbiBNRkEgdG9rZW4gY29kZSBmb3IgdGhlIHByb3ZpZGVkIE1GQSBTZXJpYWxcbiAqICAgICAvLyBjb2RlLiBJZiBhIHByb2ZpbGUgcmVxdWlyZXMgYW4gTUZBIGNvZGUgYW5kIGBtZmFDb2RlUHJvdmlkZXJgIGlzIG5vdCBhIHZhbGlkIGZ1bmN0aW9uLCB0aGUgY3JlZGVudGlhbCBwcm92aWRlclxuICogICAgIC8vIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZC5cbiAqICAgICBtZmFDb2RlUHJvdmlkZXI6IGFzeW5jIChtZmFTZXJpYWwpID0+IHtcbiAqICAgICAgIHJldHVybiBcInRva2VuXCI7XG4gKiAgICAgfSxcbiAqICAgICAvLyBPcHRpb25hbC4gQ3VzdG9tIFNUUyBjbGllbnQgY29uZmlndXJhdGlvbnMgb3ZlcnJpZGluZyB0aGUgZGVmYXVsdCBvbmVzLlxuICogICAgIGNsaWVudENvbmZpZzogeyByZWdpb24gfSxcbiAqICAgfSksXG4gKiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgY29uc3QgZnJvbUluaSA9IChpbml0OiBGcm9tSW5pSW5pdCA9IHt9KTogQ3JlZGVudGlhbFByb3ZpZGVyID0+XG4gIF9mcm9tSW5pKHtcbiAgICAuLi5pbml0LFxuICAgIHJvbGVBc3N1bWVyOiBpbml0LnJvbGVBc3N1bWVyID8/IGdldERlZmF1bHRSb2xlQXNzdW1lcihpbml0LmNsaWVudENvbmZpZyksXG4gICAgcm9sZUFzc3VtZXJXaXRoV2ViSWRlbnRpdHk6XG4gICAgICBpbml0LnJvbGVBc3N1bWVyV2l0aFdlYklkZW50aXR5ID8/IGdldERlZmF1bHRSb2xlQXNzdW1lcldpdGhXZWJJZGVudGl0eShpbml0LmNsaWVudENvbmZpZyksXG4gIH0pO1xuIl19