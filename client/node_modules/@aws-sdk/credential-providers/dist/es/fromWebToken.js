import { __assign } from "tslib";
import { getDefaultRoleAssumerWithWebIdentity } from "@aws-sdk/client-sts";
import { fromWebToken as _fromWebToken, } from "@aws-sdk/credential-provider-web-identity";
/**
 * Creates a credential provider function that gets credentials calling STS
 * AssumeRoleWithWebIdentity API.
 *
 * ```javascript
 * import { fromWebToken } from "@aws-sdk/credential-providers"; // ES6 import
 * // const { fromWebToken } = require("@aws-sdk/credential-providers"); // CommonJS import
 *
 * const dynamodb = new DynamoDBClient({
 *   region,
 *   credentials: fromWebToken({
 *     // Required. ARN of the role that the caller is assuming.
 *     roleArn: "arn:aws:iam::1234567890:role/RoleA",
 *     // Required. The OAuth 2.0 access token or OpenID Connect ID token that is provided by the identity provider.
 *     webIdentityToken: await openIdProvider()
 *     // Optional. Custom STS client configurations overriding the default ones.
 *     clientConfig: { region }
 *     // Optional. A function that assumes a role with web identity and returns a promise fulfilled with credentials for
 *     // the assumed role.
 *     roleAssumerWithWebIdentity,
 *     // Optional. An identifier for the assumed role session.
 *     roleSessionName: "session_123",
 *     // Optional. The fully qualified host component of the domain name of the identity provider.
 *     providerId: "graph.facebook.com",
 *     // Optional. ARNs of the IAM managed policies that you want to use as managed session.
 *     policyArns: [{arn: "arn:aws:iam::1234567890:policy/SomePolicy"}],
 *     // Optional. An IAM policy in JSON format that you want to use as an inline session policy.
 *     policy: "JSON_STRING",
 *     // Optional. The duration, in seconds, of the role session. Default to 3600.
 *     durationSeconds: 7200
 *   }),
 * });
 * ```
 */
export var fromWebToken = function (init) {
    var _a;
    return _fromWebToken(__assign(__assign({}, init), { roleAssumerWithWebIdentity: (_a = init.roleAssumerWithWebIdentity) !== null && _a !== void 0 ? _a : getDefaultRoleAssumerWithWebIdentity(init.clientConfig) }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbVdlYlRva2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Zyb21XZWJUb2tlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLG9DQUFvQyxFQUFtQixNQUFNLHFCQUFxQixDQUFDO0FBQzVGLE9BQU8sRUFDTCxZQUFZLElBQUksYUFBYSxHQUU5QixNQUFNLDJDQUEyQyxDQUFDO0FBT25EOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQ0c7QUFDSCxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQUcsVUFBQyxJQUFzQjs7SUFDakQsT0FBQSxhQUFhLHVCQUNSLElBQUksS0FDUCwwQkFBMEIsRUFDeEIsTUFBQSxJQUFJLENBQUMsMEJBQTBCLG1DQUFJLG9DQUFvQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFDNUYsQ0FBQTtDQUFBLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXREZWZhdWx0Um9sZUFzc3VtZXJXaXRoV2ViSWRlbnRpdHksIFNUU0NsaWVudENvbmZpZyB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtc3RzXCI7XG5pbXBvcnQge1xuICBmcm9tV2ViVG9rZW4gYXMgX2Zyb21XZWJUb2tlbixcbiAgRnJvbVdlYlRva2VuSW5pdCBhcyBfRnJvbVdlYlRva2VuSW5pdCxcbn0gZnJvbSBcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItd2ViLWlkZW50aXR5XCI7XG5pbXBvcnQgeyBDcmVkZW50aWFsUHJvdmlkZXIgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBGcm9tV2ViVG9rZW5Jbml0IGV4dGVuZHMgX0Zyb21XZWJUb2tlbkluaXQge1xuICBjbGllbnRDb25maWc/OiBTVFNDbGllbnRDb25maWc7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNyZWRlbnRpYWwgcHJvdmlkZXIgZnVuY3Rpb24gdGhhdCBnZXRzIGNyZWRlbnRpYWxzIGNhbGxpbmcgU1RTXG4gKiBBc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5IEFQSS5cbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgeyBmcm9tV2ViVG9rZW4gfSBmcm9tIFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlcnNcIjsgLy8gRVM2IGltcG9ydFxuICogLy8gY29uc3QgeyBmcm9tV2ViVG9rZW4gfSA9IHJlcXVpcmUoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyc1wiKTsgLy8gQ29tbW9uSlMgaW1wb3J0XG4gKlxuICogY29uc3QgZHluYW1vZGIgPSBuZXcgRHluYW1vREJDbGllbnQoe1xuICogICByZWdpb24sXG4gKiAgIGNyZWRlbnRpYWxzOiBmcm9tV2ViVG9rZW4oe1xuICogICAgIC8vIFJlcXVpcmVkLiBBUk4gb2YgdGhlIHJvbGUgdGhhdCB0aGUgY2FsbGVyIGlzIGFzc3VtaW5nLlxuICogICAgIHJvbGVBcm46IFwiYXJuOmF3czppYW06OjEyMzQ1Njc4OTA6cm9sZS9Sb2xlQVwiLFxuICogICAgIC8vIFJlcXVpcmVkLiBUaGUgT0F1dGggMi4wIGFjY2VzcyB0b2tlbiBvciBPcGVuSUQgQ29ubmVjdCBJRCB0b2tlbiB0aGF0IGlzIHByb3ZpZGVkIGJ5IHRoZSBpZGVudGl0eSBwcm92aWRlci5cbiAqICAgICB3ZWJJZGVudGl0eVRva2VuOiBhd2FpdCBvcGVuSWRQcm92aWRlcigpXG4gKiAgICAgLy8gT3B0aW9uYWwuIEN1c3RvbSBTVFMgY2xpZW50IGNvbmZpZ3VyYXRpb25zIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHQgb25lcy5cbiAqICAgICBjbGllbnRDb25maWc6IHsgcmVnaW9uIH1cbiAqICAgICAvLyBPcHRpb25hbC4gQSBmdW5jdGlvbiB0aGF0IGFzc3VtZXMgYSByb2xlIHdpdGggd2ViIGlkZW50aXR5IGFuZCByZXR1cm5zIGEgcHJvbWlzZSBmdWxmaWxsZWQgd2l0aCBjcmVkZW50aWFscyBmb3JcbiAqICAgICAvLyB0aGUgYXNzdW1lZCByb2xlLlxuICogICAgIHJvbGVBc3N1bWVyV2l0aFdlYklkZW50aXR5LFxuICogICAgIC8vIE9wdGlvbmFsLiBBbiBpZGVudGlmaWVyIGZvciB0aGUgYXNzdW1lZCByb2xlIHNlc3Npb24uXG4gKiAgICAgcm9sZVNlc3Npb25OYW1lOiBcInNlc3Npb25fMTIzXCIsXG4gKiAgICAgLy8gT3B0aW9uYWwuIFRoZSBmdWxseSBxdWFsaWZpZWQgaG9zdCBjb21wb25lbnQgb2YgdGhlIGRvbWFpbiBuYW1lIG9mIHRoZSBpZGVudGl0eSBwcm92aWRlci5cbiAqICAgICBwcm92aWRlcklkOiBcImdyYXBoLmZhY2Vib29rLmNvbVwiLFxuICogICAgIC8vIE9wdGlvbmFsLiBBUk5zIG9mIHRoZSBJQU0gbWFuYWdlZCBwb2xpY2llcyB0aGF0IHlvdSB3YW50IHRvIHVzZSBhcyBtYW5hZ2VkIHNlc3Npb24uXG4gKiAgICAgcG9saWN5QXJuczogW3thcm46IFwiYXJuOmF3czppYW06OjEyMzQ1Njc4OTA6cG9saWN5L1NvbWVQb2xpY3lcIn1dLFxuICogICAgIC8vIE9wdGlvbmFsLiBBbiBJQU0gcG9saWN5IGluIEpTT04gZm9ybWF0IHRoYXQgeW91IHdhbnQgdG8gdXNlIGFzIGFuIGlubGluZSBzZXNzaW9uIHBvbGljeS5cbiAqICAgICBwb2xpY3k6IFwiSlNPTl9TVFJJTkdcIixcbiAqICAgICAvLyBPcHRpb25hbC4gVGhlIGR1cmF0aW9uLCBpbiBzZWNvbmRzLCBvZiB0aGUgcm9sZSBzZXNzaW9uLiBEZWZhdWx0IHRvIDM2MDAuXG4gKiAgICAgZHVyYXRpb25TZWNvbmRzOiA3MjAwXG4gKiAgIH0pLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IGZyb21XZWJUb2tlbiA9IChpbml0OiBGcm9tV2ViVG9rZW5Jbml0KTogQ3JlZGVudGlhbFByb3ZpZGVyID0+XG4gIF9mcm9tV2ViVG9rZW4oe1xuICAgIC4uLmluaXQsXG4gICAgcm9sZUFzc3VtZXJXaXRoV2ViSWRlbnRpdHk6XG4gICAgICBpbml0LnJvbGVBc3N1bWVyV2l0aFdlYklkZW50aXR5ID8/IGdldERlZmF1bHRSb2xlQXNzdW1lcldpdGhXZWJJZGVudGl0eShpbml0LmNsaWVudENvbmZpZyksXG4gIH0pO1xuIl19