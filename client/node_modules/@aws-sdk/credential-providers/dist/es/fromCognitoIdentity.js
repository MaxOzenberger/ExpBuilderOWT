import { __assign } from "tslib";
import { CognitoIdentityClient } from "@aws-sdk/client-cognito-identity";
import { fromCognitoIdentity as _fromCognitoIdentity, } from "@aws-sdk/credential-provider-cognito-identity";
/**
 * Creates a credential provider function that reetrieves temporary AWS credentials using Amazon Cognito's
 * `GetCredentialsForIdentity` operation.
 *
 * Results from this function call are not cached internally.
 *
 * ```javascript
 * import { fromCognitoIdentity } from "@aws-sdk/credential-providers"; // ES6 import
 * // const { fromCognitoIdentity } = require("@aws-sdk/credential-providers"); // CommonJS import
 *
 * const client = new FooClient({
 *   region,
 *   credentials: fromCognitoIdentity({
 *     // Required. The unique identifier for the identity against which credentials
 *     // will be issued.
 *     identityId: "us-east-1:128d0a74-c82f-4553-916d-90053e4a8b0f"
 *     // optional. The ARN of the role to be assumed when multiple roles were
 *     // received in the token from the identity provider.
 *     customRoleArn: "arn:aws:iam::1234567890:role/MYAPP-CognitoIdentity"
 *     // Optional. A set of name-value pairs that map provider names to provider
 *     // tokens. Required when using identities associated with external identity
 *     // providers such as Facebook.
 *     logins: {
 *       "graph.facebook.com": "FBTOKEN",
 *       "www.amazon.com": "AMAZONTOKEN",
 *       "accounts.google.com": "GOOGLETOKEN",
 *       "api.twitter.com": "TWITTERTOKEN'",
 *       "www.digits.com": "DIGITSTOKEN"
 *     },
 *     // Optional. Custom client configuration if you need overwrite default Cognito Identity client configuration.
 *     clientConfig: { region }
 *   }),
 * });
 * ```
 */
export var fromCognitoIdentity = function (options) {
    var _a;
    return _fromCognitoIdentity(__assign(__assign({}, options), { client: new CognitoIdentityClient((_a = options.clientConfig) !== null && _a !== void 0 ? _a : {}) }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbUNvZ25pdG9JZGVudGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mcm9tQ29nbml0b0lkZW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUscUJBQXFCLEVBQStCLE1BQU0sa0NBQWtDLENBQUM7QUFDdEcsT0FBTyxFQUVMLG1CQUFtQixJQUFJLG9CQUFvQixHQUU1QyxNQUFNLCtDQUErQyxDQUFDO0FBV3ZEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBa0NHO0FBQ0gsTUFBTSxDQUFDLElBQU0sbUJBQW1CLEdBQUcsVUFBQyxPQUFzQzs7SUFDeEUsT0FBQSxvQkFBb0IsdUJBQ2YsT0FBTyxLQUNWLE1BQU0sRUFBRSxJQUFJLHFCQUFxQixDQUFDLE1BQUEsT0FBTyxDQUFDLFlBQVksbUNBQUksRUFBRSxDQUFDLElBQzdELENBQUE7Q0FBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29nbml0b0lkZW50aXR5Q2xpZW50LCBDb2duaXRvSWRlbnRpdHlDbGllbnRDb25maWcgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWNvZ25pdG8taWRlbnRpdHlcIjtcbmltcG9ydCB7XG4gIENvZ25pdG9JZGVudGl0eUNyZWRlbnRpYWxQcm92aWRlciBhcyBfQ29nbml0b0lkZW50aXR5Q3JlZGVudGlhbFByb3ZpZGVyLFxuICBmcm9tQ29nbml0b0lkZW50aXR5IGFzIF9mcm9tQ29nbml0b0lkZW50aXR5LFxuICBGcm9tQ29nbml0b0lkZW50aXR5UGFyYW1ldGVycyBhcyBfRnJvbUNvZ25pdG9JZGVudGl0eVBhcmFtZXRlcnMsXG59IGZyb20gXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLWNvZ25pdG8taWRlbnRpdHlcIjtcblxuZXhwb3J0IGludGVyZmFjZSBGcm9tQ29nbml0b0lkZW50aXR5UGFyYW1ldGVycyBleHRlbmRzIE9taXQ8X0Zyb21Db2duaXRvSWRlbnRpdHlQYXJhbWV0ZXJzLCBcImNsaWVudFwiPiB7XG4gIC8qKlxuICAgKiBDdXN0b20gY2xpZW50IGNvbmZpZ3VyYXRpb24gaWYgeW91IG5lZWQgb3ZlcndyaXRlIGRlZmF1bHQgQ29nbml0byBJZGVudGl0eSBjbGllbnQgY29uZmlndXJhdGlvbi5cbiAgICovXG4gIGNsaWVudENvbmZpZz86IENvZ25pdG9JZGVudGl0eUNsaWVudENvbmZpZztcbn1cblxuZXhwb3J0IHR5cGUgQ29nbml0b0lkZW50aXR5Q3JlZGVudGlhbFByb3ZpZGVyID0gX0NvZ25pdG9JZGVudGl0eUNyZWRlbnRpYWxQcm92aWRlcjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY3JlZGVudGlhbCBwcm92aWRlciBmdW5jdGlvbiB0aGF0IHJlZXRyaWV2ZXMgdGVtcG9yYXJ5IEFXUyBjcmVkZW50aWFscyB1c2luZyBBbWF6b24gQ29nbml0bydzXG4gKiBgR2V0Q3JlZGVudGlhbHNGb3JJZGVudGl0eWAgb3BlcmF0aW9uLlxuICpcbiAqIFJlc3VsdHMgZnJvbSB0aGlzIGZ1bmN0aW9uIGNhbGwgYXJlIG5vdCBjYWNoZWQgaW50ZXJuYWxseS5cbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgeyBmcm9tQ29nbml0b0lkZW50aXR5IH0gZnJvbSBcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXJzXCI7IC8vIEVTNiBpbXBvcnRcbiAqIC8vIGNvbnN0IHsgZnJvbUNvZ25pdG9JZGVudGl0eSB9ID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXJzXCIpOyAvLyBDb21tb25KUyBpbXBvcnRcbiAqXG4gKiBjb25zdCBjbGllbnQgPSBuZXcgRm9vQ2xpZW50KHtcbiAqICAgcmVnaW9uLFxuICogICBjcmVkZW50aWFsczogZnJvbUNvZ25pdG9JZGVudGl0eSh7XG4gKiAgICAgLy8gUmVxdWlyZWQuIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGlkZW50aXR5IGFnYWluc3Qgd2hpY2ggY3JlZGVudGlhbHNcbiAqICAgICAvLyB3aWxsIGJlIGlzc3VlZC5cbiAqICAgICBpZGVudGl0eUlkOiBcInVzLWVhc3QtMToxMjhkMGE3NC1jODJmLTQ1NTMtOTE2ZC05MDA1M2U0YThiMGZcIlxuICogICAgIC8vIG9wdGlvbmFsLiBUaGUgQVJOIG9mIHRoZSByb2xlIHRvIGJlIGFzc3VtZWQgd2hlbiBtdWx0aXBsZSByb2xlcyB3ZXJlXG4gKiAgICAgLy8gcmVjZWl2ZWQgaW4gdGhlIHRva2VuIGZyb20gdGhlIGlkZW50aXR5IHByb3ZpZGVyLlxuICogICAgIGN1c3RvbVJvbGVBcm46IFwiYXJuOmF3czppYW06OjEyMzQ1Njc4OTA6cm9sZS9NWUFQUC1Db2duaXRvSWRlbnRpdHlcIlxuICogICAgIC8vIE9wdGlvbmFsLiBBIHNldCBvZiBuYW1lLXZhbHVlIHBhaXJzIHRoYXQgbWFwIHByb3ZpZGVyIG5hbWVzIHRvIHByb3ZpZGVyXG4gKiAgICAgLy8gdG9rZW5zLiBSZXF1aXJlZCB3aGVuIHVzaW5nIGlkZW50aXRpZXMgYXNzb2NpYXRlZCB3aXRoIGV4dGVybmFsIGlkZW50aXR5XG4gKiAgICAgLy8gcHJvdmlkZXJzIHN1Y2ggYXMgRmFjZWJvb2suXG4gKiAgICAgbG9naW5zOiB7XG4gKiAgICAgICBcImdyYXBoLmZhY2Vib29rLmNvbVwiOiBcIkZCVE9LRU5cIixcbiAqICAgICAgIFwid3d3LmFtYXpvbi5jb21cIjogXCJBTUFaT05UT0tFTlwiLFxuICogICAgICAgXCJhY2NvdW50cy5nb29nbGUuY29tXCI6IFwiR09PR0xFVE9LRU5cIixcbiAqICAgICAgIFwiYXBpLnR3aXR0ZXIuY29tXCI6IFwiVFdJVFRFUlRPS0VOJ1wiLFxuICogICAgICAgXCJ3d3cuZGlnaXRzLmNvbVwiOiBcIkRJR0lUU1RPS0VOXCJcbiAqICAgICB9LFxuICogICAgIC8vIE9wdGlvbmFsLiBDdXN0b20gY2xpZW50IGNvbmZpZ3VyYXRpb24gaWYgeW91IG5lZWQgb3ZlcndyaXRlIGRlZmF1bHQgQ29nbml0byBJZGVudGl0eSBjbGllbnQgY29uZmlndXJhdGlvbi5cbiAqICAgICBjbGllbnRDb25maWc6IHsgcmVnaW9uIH1cbiAqICAgfSksXG4gKiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgY29uc3QgZnJvbUNvZ25pdG9JZGVudGl0eSA9IChvcHRpb25zOiBGcm9tQ29nbml0b0lkZW50aXR5UGFyYW1ldGVycyk6IENvZ25pdG9JZGVudGl0eUNyZWRlbnRpYWxQcm92aWRlciA9PlxuICBfZnJvbUNvZ25pdG9JZGVudGl0eSh7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBjbGllbnQ6IG5ldyBDb2duaXRvSWRlbnRpdHlDbGllbnQob3B0aW9ucy5jbGllbnRDb25maWcgPz8ge30pLFxuICB9KTtcbiJdfQ==