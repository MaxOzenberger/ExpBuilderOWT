import { __assign } from "tslib";
import { getDefaultRoleAssumerWithWebIdentity } from "@aws-sdk/client-sts";
import { fromTokenFile as _fromTokenFile, } from "@aws-sdk/credential-provider-web-identity";
/**
 * Creates a credential provider function that reads OIDC token from given file, then call STS.AssumeRoleWithWebIdentity
 * API. The configurations must be specified in environmental variables:
 *
 * - Reads file location of where the OIDC token is stored from either provided option `webIdentityTokenFile` or
 *   environment variable `AWS_WEB_IDENTITY_TOKEN_FILE`.
 * - Reads IAM role wanting to be assumed from either provided option `roleArn` or environment variable `AWS_ROLE_ARN`.
 * - Reads optional role session name to be used to distinguish sessions from provided option `roleSessionName` or
 *   environment variable `AWS_ROLE_SESSION_NAME`.
 *   If session name is not defined, it comes up with a role session name.
 * - Reads OIDC token from file on disk.
 * - Calls sts:AssumeRoleWithWebIdentity via `roleAssumerWithWebIdentity` option to get credentials.
 *
 * ```javascript
 * import { fromTokenFile } from "@aws-sdk/credential-providers"; // ES6 import
 * // const { fromTokenFile } = require("@aws-sdk/credential-providers"); // CommonJS import
 *
 * const client = new FooClient({
 *   credentials: fromTokenFile({
 *     // Optional. STS client config to make the assume role request.
 *     clientConfig: { region }
 *   });
 * });
 * ```
 */
export var fromTokenFile = function (init) {
    var _a;
    if (init === void 0) { init = {}; }
    return _fromTokenFile(__assign(__assign({}, init), { roleAssumerWithWebIdentity: (_a = init.roleAssumerWithWebIdentity) !== null && _a !== void 0 ? _a : getDefaultRoleAssumerWithWebIdentity(init.clientConfig) }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbVRva2VuRmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mcm9tVG9rZW5GaWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsb0NBQW9DLEVBQW1CLE1BQU0scUJBQXFCLENBQUM7QUFDNUYsT0FBTyxFQUNMLGFBQWEsSUFBSSxjQUFjLEdBRWhDLE1BQU0sMkNBQTJDLENBQUM7QUFPbkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXdCRztBQUNILE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBRyxVQUFDLElBQTRCOztJQUE1QixxQkFBQSxFQUFBLFNBQTRCO0lBQ3hELE9BQUEsY0FBYyx1QkFDVCxJQUFJLEtBQ1AsMEJBQTBCLEVBQ3hCLE1BQUEsSUFBSSxDQUFDLDBCQUEwQixtQ0FBSSxvQ0FBb0MsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQzVGLENBQUE7Q0FBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0RGVmYXVsdFJvbGVBc3N1bWVyV2l0aFdlYklkZW50aXR5LCBTVFNDbGllbnRDb25maWcgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LXN0c1wiO1xuaW1wb3J0IHtcbiAgZnJvbVRva2VuRmlsZSBhcyBfZnJvbVRva2VuRmlsZSxcbiAgRnJvbVRva2VuRmlsZUluaXQgYXMgX0Zyb21Ub2tlbkZpbGVJbml0LFxufSBmcm9tIFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci13ZWItaWRlbnRpdHlcIjtcbmltcG9ydCB7IENyZWRlbnRpYWxQcm92aWRlciB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZyb21Ub2tlbkZpbGVJbml0IGV4dGVuZHMgX0Zyb21Ub2tlbkZpbGVJbml0IHtcbiAgY2xpZW50Q29uZmlnPzogU1RTQ2xpZW50Q29uZmlnO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjcmVkZW50aWFsIHByb3ZpZGVyIGZ1bmN0aW9uIHRoYXQgcmVhZHMgT0lEQyB0b2tlbiBmcm9tIGdpdmVuIGZpbGUsIHRoZW4gY2FsbCBTVFMuQXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eVxuICogQVBJLiBUaGUgY29uZmlndXJhdGlvbnMgbXVzdCBiZSBzcGVjaWZpZWQgaW4gZW52aXJvbm1lbnRhbCB2YXJpYWJsZXM6XG4gKlxuICogLSBSZWFkcyBmaWxlIGxvY2F0aW9uIG9mIHdoZXJlIHRoZSBPSURDIHRva2VuIGlzIHN0b3JlZCBmcm9tIGVpdGhlciBwcm92aWRlZCBvcHRpb24gYHdlYklkZW50aXR5VG9rZW5GaWxlYCBvclxuICogICBlbnZpcm9ubWVudCB2YXJpYWJsZSBgQVdTX1dFQl9JREVOVElUWV9UT0tFTl9GSUxFYC5cbiAqIC0gUmVhZHMgSUFNIHJvbGUgd2FudGluZyB0byBiZSBhc3N1bWVkIGZyb20gZWl0aGVyIHByb3ZpZGVkIG9wdGlvbiBgcm9sZUFybmAgb3IgZW52aXJvbm1lbnQgdmFyaWFibGUgYEFXU19ST0xFX0FSTmAuXG4gKiAtIFJlYWRzIG9wdGlvbmFsIHJvbGUgc2Vzc2lvbiBuYW1lIHRvIGJlIHVzZWQgdG8gZGlzdGluZ3Vpc2ggc2Vzc2lvbnMgZnJvbSBwcm92aWRlZCBvcHRpb24gYHJvbGVTZXNzaW9uTmFtZWAgb3JcbiAqICAgZW52aXJvbm1lbnQgdmFyaWFibGUgYEFXU19ST0xFX1NFU1NJT05fTkFNRWAuXG4gKiAgIElmIHNlc3Npb24gbmFtZSBpcyBub3QgZGVmaW5lZCwgaXQgY29tZXMgdXAgd2l0aCBhIHJvbGUgc2Vzc2lvbiBuYW1lLlxuICogLSBSZWFkcyBPSURDIHRva2VuIGZyb20gZmlsZSBvbiBkaXNrLlxuICogLSBDYWxscyBzdHM6QXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eSB2aWEgYHJvbGVBc3N1bWVyV2l0aFdlYklkZW50aXR5YCBvcHRpb24gdG8gZ2V0IGNyZWRlbnRpYWxzLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCB7IGZyb21Ub2tlbkZpbGUgfSBmcm9tIFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlcnNcIjsgLy8gRVM2IGltcG9ydFxuICogLy8gY29uc3QgeyBmcm9tVG9rZW5GaWxlIH0gPSByZXF1aXJlKFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlcnNcIik7IC8vIENvbW1vbkpTIGltcG9ydFxuICpcbiAqIGNvbnN0IGNsaWVudCA9IG5ldyBGb29DbGllbnQoe1xuICogICBjcmVkZW50aWFsczogZnJvbVRva2VuRmlsZSh7XG4gKiAgICAgLy8gT3B0aW9uYWwuIFNUUyBjbGllbnQgY29uZmlnIHRvIG1ha2UgdGhlIGFzc3VtZSByb2xlIHJlcXVlc3QuXG4gKiAgICAgY2xpZW50Q29uZmlnOiB7IHJlZ2lvbiB9XG4gKiAgIH0pO1xuICogfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IGZyb21Ub2tlbkZpbGUgPSAoaW5pdDogRnJvbVRva2VuRmlsZUluaXQgPSB7fSk6IENyZWRlbnRpYWxQcm92aWRlciA9PlxuICBfZnJvbVRva2VuRmlsZSh7XG4gICAgLi4uaW5pdCxcbiAgICByb2xlQXNzdW1lcldpdGhXZWJJZGVudGl0eTpcbiAgICAgIGluaXQucm9sZUFzc3VtZXJXaXRoV2ViSWRlbnRpdHkgPz8gZ2V0RGVmYXVsdFJvbGVBc3N1bWVyV2l0aFdlYklkZW50aXR5KGluaXQuY2xpZW50Q29uZmlnKSxcbiAgfSk7XG4iXX0=