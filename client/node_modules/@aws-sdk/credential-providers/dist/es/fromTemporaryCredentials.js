import { __assign, __awaiter, __generator } from "tslib";
import { AssumeRoleCommand, STSClient } from "@aws-sdk/client-sts";
import { CredentialsProviderError } from "@aws-sdk/property-provider";
/**
 * Creates a credential provider function that retrieves temporary credentials from STS AssumeRole API.
 *
 * ```javascript
 * import { fromTemporaryCredentials } from "@aws-sdk/credential-providers"; // ES6 import
 * // const { fromTemporaryCredentials } = require("@aws-sdk/credential-providers"); // CommonJS import
 *
 * const client = new FooClient({
 *   region,
 *   credentials: fromTemporaryCredentials(
 *     // Optional. The master credentials used to get and refresh temporary credentials from AWS STS. If skipped, it uses
 *     // the default credential resolved by internal STS client.
 *     masterCredentials: fromTemporaryCredentials({
 *       params: { RoleArn: "arn:aws:iam::1234567890:role/RoleA" }
 *     }),
 *     // Required. Options passed to STS AssumeRole operation.
 *     params: {
 *       // Required. ARN of role to assume.
 *       RoleArn: "arn:aws:iam::1234567890:role/RoleB",
 *       // Optional. An identifier for the assumed role session. If skipped, it generates a random session name with
 *       // prefix of 'aws-sdk-js-'.
 *       RoleSessionName: "aws-sdk-js-123",
 *       // Optional. The duration, in seconds, of the role session.
 *       DurationSeconds: 3600
 *       //... For more options see https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html
 *     },
 *     // Optional. Custom STS client configurations overriding the default ones.
 *     clientConfig: { region },
 *     // Optional. A function that returns a promise fulfilled with an MFA token code for the provided MFA Serial code.
 *     // Required if `params` has `SerialNumber` config.
 *     mfaCodeProvider: async mfaSerial => {
 *       return "token"
 *     }
 *   ),
 * });
 * ```
 */
export var fromTemporaryCredentials = function (options) {
    var stsClient;
    return function () { return __awaiter(void 0, void 0, void 0, function () {
        var params, _a, Credentials;
        var _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    params = __assign(__assign({}, options.params), { RoleSessionName: (_b = options.params.RoleSessionName) !== null && _b !== void 0 ? _b : "aws-sdk-js-" + Date.now() });
                    if (!(params === null || params === void 0 ? void 0 : params.SerialNumber)) return [3 /*break*/, 2];
                    if (!options.mfaCodeProvider) {
                        throw new CredentialsProviderError("Temporary credential requires multi-factor authentication," + " but no MFA code callback was provided.", false);
                    }
                    _a = params;
                    return [4 /*yield*/, options.mfaCodeProvider(params === null || params === void 0 ? void 0 : params.SerialNumber)];
                case 1:
                    _a.TokenCode = _c.sent();
                    _c.label = 2;
                case 2:
                    if (!stsClient)
                        stsClient = new STSClient(__assign(__assign({}, options.clientConfig), { credentials: options.masterCredentials }));
                    return [4 /*yield*/, stsClient.send(new AssumeRoleCommand(params))];
                case 3:
                    Credentials = (_c.sent()).Credentials;
                    if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
                        throw new CredentialsProviderError("Invalid response from STS.assumeRole call with role " + params.RoleArn);
                    }
                    return [2 /*return*/, {
                            accessKeyId: Credentials.AccessKeyId,
                            secretAccessKey: Credentials.SecretAccessKey,
                            sessionToken: Credentials.SessionToken,
                            expiration: Credentials.Expiration,
                        }];
            }
        });
    }); };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbVRlbXBvcmFyeUNyZWRlbnRpYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Zyb21UZW1wb3JhcnlDcmVkZW50aWFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUEwQixTQUFTLEVBQW1CLE1BQU0scUJBQXFCLENBQUM7QUFDNUcsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFVdEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9DRztBQUNILE1BQU0sQ0FBQyxJQUFNLHdCQUF3QixHQUFHLFVBQUMsT0FBd0M7SUFDL0UsSUFBSSxTQUFvQixDQUFDO0lBQ3pCLE9BQU87Ozs7OztvQkFDQyxNQUFNLHlCQUFRLE9BQU8sQ0FBQyxNQUFNLEtBQUUsZUFBZSxFQUFFLE1BQUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLG1DQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUUsQ0FBQzt5QkFDaEgsQ0FBQSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsWUFBWSxDQUFBLEVBQXBCLHdCQUFvQjtvQkFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUU7d0JBQzVCLE1BQU0sSUFBSSx3QkFBd0IsQ0FDaEMsNERBQTRELEdBQUcseUNBQXlDLEVBQ3hHLEtBQUssQ0FDTixDQUFDO3FCQUNIO29CQUNELEtBQUEsTUFBTSxDQUFBO29CQUFhLHFCQUFNLE9BQU8sQ0FBQyxlQUFlLENBQUMsTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLFlBQVksQ0FBQyxFQUFBOztvQkFBdEUsR0FBTyxTQUFTLEdBQUcsU0FBbUQsQ0FBQzs7O29CQUV6RSxJQUFJLENBQUMsU0FBUzt3QkFBRSxTQUFTLEdBQUcsSUFBSSxTQUFTLHVCQUFNLE9BQU8sQ0FBQyxZQUFZLEtBQUUsV0FBVyxFQUFFLE9BQU8sQ0FBQyxpQkFBaUIsSUFBRyxDQUFDO29CQUN2RixxQkFBTSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQTs7b0JBQW5FLFdBQVcsR0FBSyxDQUFBLFNBQW1ELENBQUEsWUFBeEQ7b0JBQ25CLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRTt3QkFDNUUsTUFBTSxJQUFJLHdCQUF3QixDQUFDLHlEQUF1RCxNQUFNLENBQUMsT0FBUyxDQUFDLENBQUM7cUJBQzdHO29CQUNELHNCQUFPOzRCQUNMLFdBQVcsRUFBRSxXQUFXLENBQUMsV0FBVzs0QkFDcEMsZUFBZSxFQUFFLFdBQVcsQ0FBQyxlQUFlOzRCQUM1QyxZQUFZLEVBQUUsV0FBVyxDQUFDLFlBQVk7NEJBQ3RDLFVBQVUsRUFBRSxXQUFXLENBQUMsVUFBVTt5QkFDbkMsRUFBQzs7O1NBQ0gsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzc3VtZVJvbGVDb21tYW5kLCBBc3N1bWVSb2xlQ29tbWFuZElucHV0LCBTVFNDbGllbnQsIFNUU0NsaWVudENvbmZpZyB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtc3RzXCI7XG5pbXBvcnQgeyBDcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IgfSBmcm9tIFwiQGF3cy1zZGsvcHJvcGVydHktcHJvdmlkZXJcIjtcbmltcG9ydCB7IENyZWRlbnRpYWxQcm92aWRlciwgQ3JlZGVudGlhbHMgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBGcm9tVGVtcG9yYXJ5Q3JlZGVudGlhbHNPcHRpb25zIHtcbiAgcGFyYW1zOiBPbWl0PEFzc3VtZVJvbGVDb21tYW5kSW5wdXQsIFwiUm9sZVNlc3Npb25OYW1lXCI+ICYgeyBSb2xlU2Vzc2lvbk5hbWU/OiBzdHJpbmcgfTtcbiAgbWFzdGVyQ3JlZGVudGlhbHM/OiBDcmVkZW50aWFscyB8IENyZWRlbnRpYWxQcm92aWRlcjtcbiAgY2xpZW50Q29uZmlnPzogU1RTQ2xpZW50Q29uZmlnO1xuICBtZmFDb2RlUHJvdmlkZXI/OiAobWZhU2VyaWFsOiBzdHJpbmcpID0+IFByb21pc2U8c3RyaW5nPjtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY3JlZGVudGlhbCBwcm92aWRlciBmdW5jdGlvbiB0aGF0IHJldHJpZXZlcyB0ZW1wb3JhcnkgY3JlZGVudGlhbHMgZnJvbSBTVFMgQXNzdW1lUm9sZSBBUEkuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogaW1wb3J0IHsgZnJvbVRlbXBvcmFyeUNyZWRlbnRpYWxzIH0gZnJvbSBcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXJzXCI7IC8vIEVTNiBpbXBvcnRcbiAqIC8vIGNvbnN0IHsgZnJvbVRlbXBvcmFyeUNyZWRlbnRpYWxzIH0gPSByZXF1aXJlKFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlcnNcIik7IC8vIENvbW1vbkpTIGltcG9ydFxuICpcbiAqIGNvbnN0IGNsaWVudCA9IG5ldyBGb29DbGllbnQoe1xuICogICByZWdpb24sXG4gKiAgIGNyZWRlbnRpYWxzOiBmcm9tVGVtcG9yYXJ5Q3JlZGVudGlhbHMoXG4gKiAgICAgLy8gT3B0aW9uYWwuIFRoZSBtYXN0ZXIgY3JlZGVudGlhbHMgdXNlZCB0byBnZXQgYW5kIHJlZnJlc2ggdGVtcG9yYXJ5IGNyZWRlbnRpYWxzIGZyb20gQVdTIFNUUy4gSWYgc2tpcHBlZCwgaXQgdXNlc1xuICogICAgIC8vIHRoZSBkZWZhdWx0IGNyZWRlbnRpYWwgcmVzb2x2ZWQgYnkgaW50ZXJuYWwgU1RTIGNsaWVudC5cbiAqICAgICBtYXN0ZXJDcmVkZW50aWFsczogZnJvbVRlbXBvcmFyeUNyZWRlbnRpYWxzKHtcbiAqICAgICAgIHBhcmFtczogeyBSb2xlQXJuOiBcImFybjphd3M6aWFtOjoxMjM0NTY3ODkwOnJvbGUvUm9sZUFcIiB9XG4gKiAgICAgfSksXG4gKiAgICAgLy8gUmVxdWlyZWQuIE9wdGlvbnMgcGFzc2VkIHRvIFNUUyBBc3N1bWVSb2xlIG9wZXJhdGlvbi5cbiAqICAgICBwYXJhbXM6IHtcbiAqICAgICAgIC8vIFJlcXVpcmVkLiBBUk4gb2Ygcm9sZSB0byBhc3N1bWUuXG4gKiAgICAgICBSb2xlQXJuOiBcImFybjphd3M6aWFtOjoxMjM0NTY3ODkwOnJvbGUvUm9sZUJcIixcbiAqICAgICAgIC8vIE9wdGlvbmFsLiBBbiBpZGVudGlmaWVyIGZvciB0aGUgYXNzdW1lZCByb2xlIHNlc3Npb24uIElmIHNraXBwZWQsIGl0IGdlbmVyYXRlcyBhIHJhbmRvbSBzZXNzaW9uIG5hbWUgd2l0aFxuICogICAgICAgLy8gcHJlZml4IG9mICdhd3Mtc2RrLWpzLScuXG4gKiAgICAgICBSb2xlU2Vzc2lvbk5hbWU6IFwiYXdzLXNkay1qcy0xMjNcIixcbiAqICAgICAgIC8vIE9wdGlvbmFsLiBUaGUgZHVyYXRpb24sIGluIHNlY29uZHMsIG9mIHRoZSByb2xlIHNlc3Npb24uXG4gKiAgICAgICBEdXJhdGlvblNlY29uZHM6IDM2MDBcbiAqICAgICAgIC8vLi4uIEZvciBtb3JlIG9wdGlvbnMgc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9TVFMvbGF0ZXN0L0FQSVJlZmVyZW5jZS9BUElfQXNzdW1lUm9sZS5odG1sXG4gKiAgICAgfSxcbiAqICAgICAvLyBPcHRpb25hbC4gQ3VzdG9tIFNUUyBjbGllbnQgY29uZmlndXJhdGlvbnMgb3ZlcnJpZGluZyB0aGUgZGVmYXVsdCBvbmVzLlxuICogICAgIGNsaWVudENvbmZpZzogeyByZWdpb24gfSxcbiAqICAgICAvLyBPcHRpb25hbC4gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBwcm9taXNlIGZ1bGZpbGxlZCB3aXRoIGFuIE1GQSB0b2tlbiBjb2RlIGZvciB0aGUgcHJvdmlkZWQgTUZBIFNlcmlhbCBjb2RlLlxuICogICAgIC8vIFJlcXVpcmVkIGlmIGBwYXJhbXNgIGhhcyBgU2VyaWFsTnVtYmVyYCBjb25maWcuXG4gKiAgICAgbWZhQ29kZVByb3ZpZGVyOiBhc3luYyBtZmFTZXJpYWwgPT4ge1xuICogICAgICAgcmV0dXJuIFwidG9rZW5cIlxuICogICAgIH1cbiAqICAgKSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjb25zdCBmcm9tVGVtcG9yYXJ5Q3JlZGVudGlhbHMgPSAob3B0aW9uczogRnJvbVRlbXBvcmFyeUNyZWRlbnRpYWxzT3B0aW9ucyk6IENyZWRlbnRpYWxQcm92aWRlciA9PiB7XG4gIGxldCBzdHNDbGllbnQ6IFNUU0NsaWVudDtcbiAgcmV0dXJuIGFzeW5jICgpOiBQcm9taXNlPENyZWRlbnRpYWxzPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zID0geyAuLi5vcHRpb25zLnBhcmFtcywgUm9sZVNlc3Npb25OYW1lOiBvcHRpb25zLnBhcmFtcy5Sb2xlU2Vzc2lvbk5hbWUgPz8gXCJhd3Mtc2RrLWpzLVwiICsgRGF0ZS5ub3coKSB9O1xuICAgIGlmIChwYXJhbXM/LlNlcmlhbE51bWJlcikge1xuICAgICAgaWYgKCFvcHRpb25zLm1mYUNvZGVQcm92aWRlcikge1xuICAgICAgICB0aHJvdyBuZXcgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFxuICAgICAgICAgIGBUZW1wb3JhcnkgY3JlZGVudGlhbCByZXF1aXJlcyBtdWx0aS1mYWN0b3IgYXV0aGVudGljYXRpb24sYCArIGAgYnV0IG5vIE1GQSBjb2RlIGNhbGxiYWNrIHdhcyBwcm92aWRlZC5gLFxuICAgICAgICAgIGZhbHNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBwYXJhbXMuVG9rZW5Db2RlID0gYXdhaXQgb3B0aW9ucy5tZmFDb2RlUHJvdmlkZXIocGFyYW1zPy5TZXJpYWxOdW1iZXIpO1xuICAgIH1cbiAgICBpZiAoIXN0c0NsaWVudCkgc3RzQ2xpZW50ID0gbmV3IFNUU0NsaWVudCh7IC4uLm9wdGlvbnMuY2xpZW50Q29uZmlnLCBjcmVkZW50aWFsczogb3B0aW9ucy5tYXN0ZXJDcmVkZW50aWFscyB9KTtcbiAgICBjb25zdCB7IENyZWRlbnRpYWxzIH0gPSBhd2FpdCBzdHNDbGllbnQuc2VuZChuZXcgQXNzdW1lUm9sZUNvbW1hbmQocGFyYW1zKSk7XG4gICAgaWYgKCFDcmVkZW50aWFscyB8fCAhQ3JlZGVudGlhbHMuQWNjZXNzS2V5SWQgfHwgIUNyZWRlbnRpYWxzLlNlY3JldEFjY2Vzc0tleSkge1xuICAgICAgdGhyb3cgbmV3IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihgSW52YWxpZCByZXNwb25zZSBmcm9tIFNUUy5hc3N1bWVSb2xlIGNhbGwgd2l0aCByb2xlICR7cGFyYW1zLlJvbGVBcm59YCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBhY2Nlc3NLZXlJZDogQ3JlZGVudGlhbHMuQWNjZXNzS2V5SWQsXG4gICAgICBzZWNyZXRBY2Nlc3NLZXk6IENyZWRlbnRpYWxzLlNlY3JldEFjY2Vzc0tleSxcbiAgICAgIHNlc3Npb25Ub2tlbjogQ3JlZGVudGlhbHMuU2Vzc2lvblRva2VuLFxuICAgICAgZXhwaXJhdGlvbjogQ3JlZGVudGlhbHMuRXhwaXJhdGlvbixcbiAgICB9O1xuICB9O1xufTtcbiJdfQ==